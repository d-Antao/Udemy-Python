[
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "astuple",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "astuple",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "varias_linhas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "varias_linhas",
        "description": "varias_linhas",
        "detail": "varias_linhas",
        "documentation": {}
    },
    {
        "label": "documentando_funcoes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "documentando_funcoes",
        "description": "documentando_funcoes",
        "detail": "documentando_funcoes",
        "documentation": {}
    },
    {
        "label": "documentando_class",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "documentando_class",
        "description": "documentando_class",
        "detail": "documentando_class",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "execisio_account",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "execisio_account",
        "description": "execisio_account",
        "detail": "execisio_account",
        "documentation": {}
    },
    {
        "label": "exercisio_person",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "exercisio_person",
        "description": "exercisio_person",
        "detail": "exercisio_person",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "zip_longest",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "zip_longest",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "EDD_FILE",
        "importPath": "exercisio23_a",
        "description": "exercisio23_a",
        "isExtraImport": true,
        "detail": "exercisio23_a",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "exercisio23_a",
        "description": "exercisio23_a",
        "isExtraImport": true,
        "detail": "exercisio23_a",
        "documentation": {}
    },
    {
        "label": "save",
        "importPath": "exercisio23_a",
        "description": "exercisio23_a",
        "isExtraImport": true,
        "detail": "exercisio23_a",
        "documentation": {}
    },
    {
        "label": "LogFileMixin",
        "importPath": "log",
        "description": "log",
        "isExtraImport": true,
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Smartphone",
        "importPath": "eletronico",
        "description": "eletronico",
        "isExtraImport": true,
        "detail": "eletronico",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.edge.service",
        "description": "selenium.webdriver.edge.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.edge.service",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.wait",
        "description": "selenium.webdriver.support.wait",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.wait",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "GeneratorType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "GeneratorType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Pessoa",
        "kind": 6,
        "importPath": "dataclass.teoria_dataclass",
        "description": "dataclass.teoria_dataclass",
        "peekOfCode": "class Pessoa:\n    nome: str \n    idade: int\n    sobrenome: str\n    @property\n    def nome_completo(self):\n        return f'{self.nome} {self.sobrenome}'\n    @nome_completo.setter\n    def nome_completo(self, valor):\n        nome, *sobrenome = valor.split()",
        "detail": "dataclass.teoria_dataclass",
        "documentation": {}
    },
    {
        "label": "Pessoa",
        "kind": 6,
        "importPath": "dataclass.teoria_dataclass_astuple_asdict",
        "description": "dataclass.teoria_dataclass_astuple_asdict",
        "peekOfCode": "class Pessoa:\n    nome: str\n    sobrenome: str\nif __name__ == '__main__':\n    lista = [Pessoa('A', 'Z'), Pessoa('B', 'Y'), Pessoa('C', 'X')]\n    ordenadas = sorted(lista, reverse=True, key=lambda p: p.sobrenome)\n    print(ordenadas)\n    p1 = Pessoa('Luiz', 'Otávio')\n    print(asdict(p1).keys())\n    print(asdict(p1).values())",
        "detail": "dataclass.teoria_dataclass_astuple_asdict",
        "documentation": {}
    },
    {
        "label": "Pessoa",
        "kind": 6,
        "importPath": "dataclass.teoria_dataclass_decorated",
        "description": "dataclass.teoria_dataclass_decorated",
        "peekOfCode": "class Pessoa:\n    nome: str\n    sobrenome: str\n    def __init__(self, nome, sobrenome):\n        self.nome = nome\n        self.sobrenome = sobrenome\n        self.nome_completo = f'{self.nome} {self.sobrenome}'\n    def __post_init__(self):\n        print('POST INIT')\n    # @property",
        "detail": "dataclass.teoria_dataclass_decorated",
        "documentation": {}
    },
    {
        "label": "Pessoa",
        "kind": 6,
        "importPath": "dataclass.teoria_dataclass_init_post_init",
        "description": "dataclass.teoria_dataclass_init_post_init",
        "peekOfCode": "class Pessoa:\n    nome: str\n    sobrenome: str\n    @property\n    def nome_completo(self):\n        return f'{self.nome} {self.sobrenome}'\n    @nome_completo.setter\n    def nome_completo(self, valor):\n        nome, *sobrenome = valor.split()\n    def __init__(self, nome, sobrenome):",
        "detail": "dataclass.teoria_dataclass_init_post_init",
        "documentation": {}
    },
    {
        "label": "Pessoa",
        "kind": 6,
        "importPath": "dataclass.teoria_dataclass_padrao_field_fields",
        "description": "dataclass.teoria_dataclass_padrao_field_fields",
        "peekOfCode": "class Pessoa:\n    nome: str\n    sobrenome: str\n    nome: str = field(\n        default='MISSING', repr=False\n    )\n    sobrenome: str = 'Not sent'\n    idade: int = 100\n    enderecos: list[str] = field(default_factory=list)\nif __name__ == '__main__':",
        "detail": "dataclass.teoria_dataclass_padrao_field_fields",
        "documentation": {}
    },
    {
        "label": "Carta",
        "kind": 6,
        "importPath": "dataclass.teoria_namedTuple",
        "description": "dataclass.teoria_namedTuple",
        "peekOfCode": "class Carta(NamedTuple):\n    valor: str = 'VALOR'\n    naipe: str = 'NAIPE'\n# Carta = namedtuple(\n#     'Carta', ['valor', 'naipe'],\n#     defaults=['VALOR', 'NAIPE']\n# )\nas_espadas = Carta('A')\nprint(as_espadas._asdict())\nprint(as_espadas)",
        "detail": "dataclass.teoria_namedTuple",
        "documentation": {}
    },
    {
        "label": "as_espadas",
        "kind": 5,
        "importPath": "dataclass.teoria_namedTuple",
        "description": "dataclass.teoria_namedTuple",
        "peekOfCode": "as_espadas = Carta('A')\nprint(as_espadas._asdict())\nprint(as_espadas)\nprint(as_espadas[0])\nprint(as_espadas.valor)\nprint(as_espadas[1])\nprint(as_espadas.naipe)\nprint()\nprint(as_espadas._fields)\nprint(as_espadas._field_defaults)",
        "detail": "dataclass.teoria_namedTuple",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 6,
        "importPath": "docStrings.documentando_class",
        "description": "docStrings.documentando_class",
        "peekOfCode": "class foo:\n    def soma(self,x: int | float, y: int | float) -> int | float:\n        \"\"\"Soma x e y\n        Este módulo contém funções e exemplos de documentação de funções.\n        A função soma você já conhece bastante.\n        :param x: Número 1\n        :type x: int or float\n        :param y: Número 2\n        :type y: int or float\n        :return: A soma entre x e y",
        "detail": "docStrings.documentando_class",
        "documentation": {}
    },
    {
        "label": "variavel_1",
        "kind": 5,
        "importPath": "docStrings.documentando_class",
        "description": "docStrings.documentando_class",
        "peekOfCode": "variavel_1 = 1\nclass foo:\n    def soma(self,x: int | float, y: int | float) -> int | float:\n        \"\"\"Soma x e y\n        Este módulo contém funções e exemplos de documentação de funções.\n        A função soma você já conhece bastante.\n        :param x: Número 1\n        :type x: int or float\n        :param y: Número 2\n        :type y: int or float",
        "detail": "docStrings.documentando_class",
        "documentation": {}
    },
    {
        "label": "variavel_2",
        "kind": 5,
        "importPath": "docStrings.documentando_class",
        "description": "docStrings.documentando_class",
        "peekOfCode": "variavel_2 = 2\nvariavel_3 = 3\nvariavel_4 = 4",
        "detail": "docStrings.documentando_class",
        "documentation": {}
    },
    {
        "label": "variavel_3",
        "kind": 5,
        "importPath": "docStrings.documentando_class",
        "description": "docStrings.documentando_class",
        "peekOfCode": "variavel_3 = 3\nvariavel_4 = 4",
        "detail": "docStrings.documentando_class",
        "documentation": {}
    },
    {
        "label": "variavel_4",
        "kind": 5,
        "importPath": "docStrings.documentando_class",
        "description": "docStrings.documentando_class",
        "peekOfCode": "variavel_4 = 4",
        "detail": "docStrings.documentando_class",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "docStrings.documentando_funcoes",
        "description": "docStrings.documentando_funcoes",
        "peekOfCode": "def soma(x: int | float, y: int | float) -> int | float:\n    \"\"\"Soma x e y\n    Este módulo contém funções e exemplos de documentação de funções.\n    A função soma você já conhece bastante.\n    :param x: Número 1\n    :type x: int or float\n    :param y: Número 2\n    :type y: int or float\n    :return: A soma entre x e y\n    :rtype: int or float",
        "detail": "docStrings.documentando_funcoes",
        "documentation": {}
    },
    {
        "label": "multiplica",
        "kind": 2,
        "importPath": "docStrings.documentando_funcoes",
        "description": "docStrings.documentando_funcoes",
        "peekOfCode": "def multiplica(\n    x: int | float,\n    y: int | float,\n    z: int | float | None = None\n) -> int | float:\n    \"\"\"Multiplica x, y e/ou z\n    Multiplica x e y. Se z for enviado, multiplica x, y, z.\n    \"\"\"\n    if z is None:\n        return x * y",
        "detail": "docStrings.documentando_funcoes",
        "documentation": {}
    },
    {
        "label": "variavel_1",
        "kind": 5,
        "importPath": "docStrings.documentando_funcoes",
        "description": "docStrings.documentando_funcoes",
        "peekOfCode": "variavel_1 = 1\n# def soma(x, y):\ndef soma(x: int | float, y: int | float) -> int | float:\n    \"\"\"Soma x e y\n    Este módulo contém funções e exemplos de documentação de funções.\n    A função soma você já conhece bastante.\n    :param x: Número 1\n    :type x: int or float\n    :param y: Número 2\n    :type y: int or float",
        "detail": "docStrings.documentando_funcoes",
        "documentation": {}
    },
    {
        "label": "variavel_2",
        "kind": 5,
        "importPath": "docStrings.documentando_funcoes",
        "description": "docStrings.documentando_funcoes",
        "peekOfCode": "variavel_2 = 2\nvariavel_3 = 3\nvariavel_4 = 4",
        "detail": "docStrings.documentando_funcoes",
        "documentation": {}
    },
    {
        "label": "variavel_3",
        "kind": 5,
        "importPath": "docStrings.documentando_funcoes",
        "description": "docStrings.documentando_funcoes",
        "peekOfCode": "variavel_3 = 3\nvariavel_4 = 4",
        "detail": "docStrings.documentando_funcoes",
        "documentation": {}
    },
    {
        "label": "variavel_4",
        "kind": 5,
        "importPath": "docStrings.documentando_funcoes",
        "description": "docStrings.documentando_funcoes",
        "peekOfCode": "variavel_4 = 4",
        "detail": "docStrings.documentando_funcoes",
        "documentation": {}
    },
    {
        "label": "funcao",
        "kind": 2,
        "importPath": "docStrings.uma_linha",
        "description": "docStrings.uma_linha",
        "peekOfCode": "def funcao():\n    return 1",
        "detail": "docStrings.uma_linha",
        "documentation": {}
    },
    {
        "label": "variavel",
        "kind": 5,
        "importPath": "docStrings.uma_linha",
        "description": "docStrings.uma_linha",
        "peekOfCode": "variavel = 'valor'\ndef funcao():\n    return 1",
        "detail": "docStrings.uma_linha",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "exercisioHerança.execisio_account",
        "description": "exercisioHerança.execisio_account",
        "peekOfCode": "class Account(ABC):\n    def __init__(self,bank_branch:int,num_account:int,balance:float = 0):\n        self.bank_branch = bank_branch\n        self.num_account = num_account\n        self.balance = balance\n    @abstractmethod    \n    def withdraw(self,value:float) -> float:... \n    def deposit(self,value:float) :\n        self.balance += value\n        self.details(f'(Deposit = {value} $)')",
        "detail": "exercisioHerança.execisio_account",
        "documentation": {}
    },
    {
        "label": "CheckingAccount",
        "kind": 6,
        "importPath": "exercisioHerança.execisio_account",
        "description": "exercisioHerança.execisio_account",
        "peekOfCode": "class CheckingAccount(Account):\n    def __init__(self,bank_branch:int,num_account:int,balance:float = 0, limit:float =0):\n        super().__init__(bank_branch, num_account, balance)\n        self.limit = limit\n    def withdraw(self, value:float)->float:\n        value_after_withdrawal = self.balance - value\n        MAX_LIMIT = -self.limit\n        if value_after_withdrawal < MAX_LIMIT:\n            self.details(f'Withdrawal denied')\n            raise ValueError(f'The withdrawal amount exceeds the balance')",
        "detail": "exercisioHerança.execisio_account",
        "documentation": {}
    },
    {
        "label": "SavingsAccount",
        "kind": 6,
        "importPath": "exercisioHerança.execisio_account",
        "description": "exercisioHerança.execisio_account",
        "peekOfCode": "class SavingsAccount(Account):\n    def __init__(self,bank_branch:int,num_account:int,balance:float = 0):\n        super().__init__(bank_branch, num_account, balance)\n    def withdraw(self, value:float) -> float:\n        value_after_withdrawal = self.balance - value\n        if value_after_withdrawal < 0:\n            self.details(f'Withdrawal denied')\n            raise ValueError(f'The withdrawal amount exceeds the balance')\n        self.balance -= value\n        self.details(f'(withdrew = {value} $ )')",
        "detail": "exercisioHerança.execisio_account",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "exercisioHerança.exercisio_bank",
        "description": "exercisioHerança.exercisio_bank",
        "peekOfCode": "class Bank:\n    def __init__(\n        self,\n        bank_branchs:list[int]|None=None,\n        clients:list[exercisio_person.Person]|None=None,\n        accounts:list[execisio_account.Account]|None=None\n    ):\n        self.bank_branchs = bank_branchs or []\n        self.clients = clients or []\n        self.accounts = accounts or []",
        "detail": "exercisioHerança.exercisio_bank",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "exercisioHerança.exercisio_person",
        "description": "exercisioHerança.exercisio_person",
        "peekOfCode": "class Person:\n    def __init__(self,name:str,age:int)->None:\n        self.name = name\n        self.age = age\n    @property    \n    def name(self):\n        return self._name\n    @name.setter\n    def name(self,name:str):\n        self._name = name",
        "detail": "exercisioHerança.exercisio_person",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "exercisioHerança.exercisio_person",
        "description": "exercisioHerança.exercisio_person",
        "peekOfCode": "class Client(Person):\n    def __init__(self,name:str,age:int)->None:\n        super().__init__(name,age,)\n        self.account: execisio_account.Account | None = None\nif __name__ == '__main__':\n    p1 = Person('Maria',22)\n    c1 = Client('Miguel',25)\n    c1.account = execisio_account.CheckingAccount(111,222,0,0)\n    print(p1)\n    print(c1)",
        "detail": "exercisioHerança.exercisio_person",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exercisios.exercisio10",
        "description": "exercisios.exercisio10",
        "peekOfCode": "lista = ['maria', 'joao', 'pedro', 'ana']\nindices = range(len(lista))\nfor indice in indices:\n    print(indice, lista[indice])\n#ou\nfor nome in lista:\n    print(nome,lista.index(nome))\n#ou\nlista_enumerada = enumerate(lista)\nfor indice in lista_enumerada:",
        "detail": "exercisios.exercisio10",
        "documentation": {}
    },
    {
        "label": "indices",
        "kind": 5,
        "importPath": "exercisios.exercisio10",
        "description": "exercisios.exercisio10",
        "peekOfCode": "indices = range(len(lista))\nfor indice in indices:\n    print(indice, lista[indice])\n#ou\nfor nome in lista:\n    print(nome,lista.index(nome))\n#ou\nlista_enumerada = enumerate(lista)\nfor indice in lista_enumerada:\n    print(indice)",
        "detail": "exercisios.exercisio10",
        "documentation": {}
    },
    {
        "label": "lista_enumerada",
        "kind": 5,
        "importPath": "exercisios.exercisio10",
        "description": "exercisios.exercisio10",
        "peekOfCode": "lista_enumerada = enumerate(lista)\nfor indice in lista_enumerada:\n    print(indice)\n#ou \nfor indice in enumerate(lista):\n    print(indice)",
        "detail": "exercisios.exercisio10",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exercisios.exercisio11",
        "description": "exercisios.exercisio11",
        "peekOfCode": "lista = []\nwhile  True:\n    print('selecione uma opção')\n    inserir = input('[i]nserir , [a]apagar, [l]istar: ')\n    inserir = inserir.lower()\n    if inserir == 'i':\n        os.system('cls')\n        lista.append(input('valor: '))\n    elif inserir == 'a':\n        try:",
        "detail": "exercisios.exercisio11",
        "documentation": {}
    },
    {
        "label": "cpf",
        "kind": 5,
        "importPath": "exercisios.exercisio12",
        "description": "exercisios.exercisio12",
        "peekOfCode": "cpf = input('Digite seu CPF: ')\ncpf_alt = cpf.replace('.', '').replace('-', '').replace(' ', '').replace(',', '').replace('_', '')\nnove_digitos = cpf_alt[:9]\ncont_reverse_1= 10\nresultado_1 = 0\nresultado_2 = 0\ntry:\n    for digito in nove_digitos:\n        resultado_1 += int(digito) * cont_reverse_1\n        cont_reverse_1 -= 1",
        "detail": "exercisios.exercisio12",
        "documentation": {}
    },
    {
        "label": "cpf_alt",
        "kind": 5,
        "importPath": "exercisios.exercisio12",
        "description": "exercisios.exercisio12",
        "peekOfCode": "cpf_alt = cpf.replace('.', '').replace('-', '').replace(' ', '').replace(',', '').replace('_', '')\nnove_digitos = cpf_alt[:9]\ncont_reverse_1= 10\nresultado_1 = 0\nresultado_2 = 0\ntry:\n    for digito in nove_digitos:\n        resultado_1 += int(digito) * cont_reverse_1\n        cont_reverse_1 -= 1\n    digito_1 = resultado_1 * 10 % 11",
        "detail": "exercisios.exercisio12",
        "documentation": {}
    },
    {
        "label": "nove_digitos",
        "kind": 5,
        "importPath": "exercisios.exercisio12",
        "description": "exercisios.exercisio12",
        "peekOfCode": "nove_digitos = cpf_alt[:9]\ncont_reverse_1= 10\nresultado_1 = 0\nresultado_2 = 0\ntry:\n    for digito in nove_digitos:\n        resultado_1 += int(digito) * cont_reverse_1\n        cont_reverse_1 -= 1\n    digito_1 = resultado_1 * 10 % 11\n    digito_1 = digito_1 if digito_1<= 9 else 0",
        "detail": "exercisios.exercisio12",
        "documentation": {}
    },
    {
        "label": "resultado_1",
        "kind": 5,
        "importPath": "exercisios.exercisio12",
        "description": "exercisios.exercisio12",
        "peekOfCode": "resultado_1 = 0\nresultado_2 = 0\ntry:\n    for digito in nove_digitos:\n        resultado_1 += int(digito) * cont_reverse_1\n        cont_reverse_1 -= 1\n    digito_1 = resultado_1 * 10 % 11\n    digito_1 = digito_1 if digito_1<= 9 else 0\n    cont_reverse_1 = 11\n    nove_digitos += str(digito_1)",
        "detail": "exercisios.exercisio12",
        "documentation": {}
    },
    {
        "label": "resultado_2",
        "kind": 5,
        "importPath": "exercisios.exercisio12",
        "description": "exercisios.exercisio12",
        "peekOfCode": "resultado_2 = 0\ntry:\n    for digito in nove_digitos:\n        resultado_1 += int(digito) * cont_reverse_1\n        cont_reverse_1 -= 1\n    digito_1 = resultado_1 * 10 % 11\n    digito_1 = digito_1 if digito_1<= 9 else 0\n    cont_reverse_1 = 11\n    nove_digitos += str(digito_1)\n    for digito in nove_digitos:",
        "detail": "exercisios.exercisio12",
        "documentation": {}
    },
    {
        "label": "multiplicaçao",
        "kind": 2,
        "importPath": "exercisios.exercisio13",
        "description": "exercisios.exercisio13",
        "peekOfCode": "def multiplicaçao(*args):\n    total = 1\n    for numero in args:\n        total *= numero  \n    return total\ndef par_impar(*args):\n    for numero in args:\n        if numero % 2 == 0:\n            print(f'O número {numero} é par')\n        else:",
        "detail": "exercisios.exercisio13",
        "documentation": {}
    },
    {
        "label": "par_impar",
        "kind": 2,
        "importPath": "exercisios.exercisio13",
        "description": "exercisios.exercisio13",
        "peekOfCode": "def par_impar(*args):\n    for numero in args:\n        if numero % 2 == 0:\n            print(f'O número {numero} é par')\n        else:\n            print(f'O número {numero} é ímpar')\nprint(f'a multiplicão dos {multiplicaçao(1,2,3,4,5,6)}')\npar_impar(0,1,2,3,4,5,6)",
        "detail": "exercisios.exercisio13",
        "documentation": {}
    },
    {
        "label": "doplicaçao",
        "kind": 2,
        "importPath": "exercisios.exercisio14",
        "description": "exercisios.exercisio14",
        "peekOfCode": "def doplicaçao(num):\n    return 2 * num\ndef triplicaçao(num):\n    return 3 * num\ndef quadriplicaçao(num):\n    return 4 * num\ndef creat_multipliers(multiplier):\n    def multipliers(num):\n        return multiplier * num\n    return multipliers",
        "detail": "exercisios.exercisio14",
        "documentation": {}
    },
    {
        "label": "triplicaçao",
        "kind": 2,
        "importPath": "exercisios.exercisio14",
        "description": "exercisios.exercisio14",
        "peekOfCode": "def triplicaçao(num):\n    return 3 * num\ndef quadriplicaçao(num):\n    return 4 * num\ndef creat_multipliers(multiplier):\n    def multipliers(num):\n        return multiplier * num\n    return multipliers",
        "detail": "exercisios.exercisio14",
        "documentation": {}
    },
    {
        "label": "quadriplicaçao",
        "kind": 2,
        "importPath": "exercisios.exercisio14",
        "description": "exercisios.exercisio14",
        "peekOfCode": "def quadriplicaçao(num):\n    return 4 * num\ndef creat_multipliers(multiplier):\n    def multipliers(num):\n        return multiplier * num\n    return multipliers",
        "detail": "exercisios.exercisio14",
        "documentation": {}
    },
    {
        "label": "creat_multipliers",
        "kind": 2,
        "importPath": "exercisios.exercisio14",
        "description": "exercisios.exercisio14",
        "peekOfCode": "def creat_multipliers(multiplier):\n    def multipliers(num):\n        return multiplier * num\n    return multipliers",
        "detail": "exercisios.exercisio14",
        "documentation": {}
    },
    {
        "label": "duplicado",
        "kind": 2,
        "importPath": "exercisios.exercisio16",
        "description": "exercisios.exercisio16",
        "peekOfCode": "def duplicado(lista):\n    for i in range(len(lista)):\n        for j in range(i + 1, len(lista)):\n            if lista[i] == lista[j]:\n                return lista[i]\n    return -1\nfor lista in lista_de_listas_de_inteiros:\n   print(f'No conjunto de números {lista} o duplicado é {duplicado(lista)}')\n\"\"\" \ndef first_duplicated(list_of_int):",
        "detail": "exercisios.exercisio16",
        "documentation": {}
    },
    {
        "label": "first_duplicated",
        "kind": 2,
        "importPath": "exercisios.exercisio16",
        "description": "exercisios.exercisio16",
        "peekOfCode": "def first_duplicated(list_of_int):\n    num_cheq = set()\n    first_duplicated = -1\n    for num in list_of_int:\n        if num in num_cheq:\n            first_duplicated = num\n            break\n        num_cheq.add(num)\n    print()\n    print()",
        "detail": "exercisios.exercisio16",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "exercisios.exercisio16",
        "description": "exercisios.exercisio16",
        "peekOfCode": "def main():\n    for lista in lista_de_listas_de_inteiros:\n        print(f'na lista {lista} o numero duplicado é {first_duplicated(lista)}')\nmain()",
        "detail": "exercisios.exercisio16",
        "documentation": {}
    },
    {
        "label": "lista_de_listas_de_inteiros",
        "kind": 5,
        "importPath": "exercisios.exercisio16",
        "description": "exercisios.exercisio16",
        "peekOfCode": "lista_de_listas_de_inteiros = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    [9, 1, 8, 9, 9, 7, 2, 1, 6, 8],\n    [1, 3, 2, 2, 8, 6, 5, 9, 6, 7],\n    [3, 8, 2, 8, 6, 7, 7, 3, 1, 9],\n    [4, 8, 8, 8, 5, 1, 10, 3, 1, 7],\n    [1, 3, 7, 2, 2, 1, 5, 1, 9, 9],\n    [10, 2, 2, 1, 3, 5, 10, 5, 10, 1],\n    [1, 6, 1, 5, 1, 1, 1, 4, 7, 3],\n    [1, 3, 7, 1, 10, 5, 9, 2, 5, 7],",
        "detail": "exercisios.exercisio16",
        "documentation": {}
    },
    {
        "label": "aumento_10",
        "kind": 2,
        "importPath": "exercisios.exercisio17",
        "description": "exercisios.exercisio17",
        "peekOfCode": "def aumento_10(produtos):\n    novos_produtos = copy.deepcopy(produtos)\n    for produto in novos_produtos:\n        produto['preço'] = round(produto['preço']*1.10, 2)\n    print(*novos_produtos,sep='\\n')\ndef ordene_nome_decrescente(produtos):\n    produtos_odenados_por_nome = sorted(copy.deepcopy(produtos), key=lambda item : item['nome'], reverse=True)\n    print(*produtos_odenados_por_nome,sep ='\\n')\ndef ordene_preco_crescente(produtos):\n    produtos_ordenados_por_preco = sorted(copy.deepcopy(produtos), key=lambda item : item['preço'])",
        "detail": "exercisios.exercisio17",
        "documentation": {}
    },
    {
        "label": "ordene_nome_decrescente",
        "kind": 2,
        "importPath": "exercisios.exercisio17",
        "description": "exercisios.exercisio17",
        "peekOfCode": "def ordene_nome_decrescente(produtos):\n    produtos_odenados_por_nome = sorted(copy.deepcopy(produtos), key=lambda item : item['nome'], reverse=True)\n    print(*produtos_odenados_por_nome,sep ='\\n')\ndef ordene_preco_crescente(produtos):\n    produtos_ordenados_por_preco = sorted(copy.deepcopy(produtos), key=lambda item : item['preço'])\n    print(*produtos_ordenados_por_preco,sep='\\n') \naumento_10(produtos)\nprint('---------------------------------------')\nordene_nome_decrescente(produtos)\nprint('---------------------------------------')",
        "detail": "exercisios.exercisio17",
        "documentation": {}
    },
    {
        "label": "ordene_preco_crescente",
        "kind": 2,
        "importPath": "exercisios.exercisio17",
        "description": "exercisios.exercisio17",
        "peekOfCode": "def ordene_preco_crescente(produtos):\n    produtos_ordenados_por_preco = sorted(copy.deepcopy(produtos), key=lambda item : item['preço'])\n    print(*produtos_ordenados_por_preco,sep='\\n') \naumento_10(produtos)\nprint('---------------------------------------')\nordene_nome_decrescente(produtos)\nprint('---------------------------------------')\nordene_preco_crescente(produtos)\nprint('---------------------------------------')\nprint(*produtos,sep='\\n')",
        "detail": "exercisios.exercisio17",
        "documentation": {}
    },
    {
        "label": "produtos",
        "kind": 5,
        "importPath": "exercisios.exercisio17",
        "description": "exercisios.exercisio17",
        "peekOfCode": "produtos = [\n    {'nome': 'produto 5', 'preço': 10.00},\n    {'nome': 'produto 1', 'preço': 22.32},\n    {'nome': 'produto 3', 'preço': 10.11},\n    {'nome': 'produto 2', 'preço': 105.87},\n    {'nome': 'produto 4', 'preço': 69.90},\n]\ndef aumento_10(produtos):\n    novos_produtos = copy.deepcopy(produtos)\n    for produto in novos_produtos:",
        "detail": "exercisios.exercisio17",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "exercisios.exercisio19",
        "description": "exercisios.exercisio19",
        "peekOfCode": "def soma(x, y):\n    return x + y\ndef multiplica(x, y):\n    return x * y\ndef criar_funcao(funcao, x):\n    def interna(y):  # scopo faz com que adie a execuçao da função\n        return funcao(x, y)\n    return interna\nsoma_com_cinco = criar_funcao(soma, 5)\nmultiplica_por_dez = criar_funcao(multiplica, 10)",
        "detail": "exercisios.exercisio19",
        "documentation": {}
    },
    {
        "label": "multiplica",
        "kind": 2,
        "importPath": "exercisios.exercisio19",
        "description": "exercisios.exercisio19",
        "peekOfCode": "def multiplica(x, y):\n    return x * y\ndef criar_funcao(funcao, x):\n    def interna(y):  # scopo faz com que adie a execuçao da função\n        return funcao(x, y)\n    return interna\nsoma_com_cinco = criar_funcao(soma, 5)\nmultiplica_por_dez = criar_funcao(multiplica, 10)\nprint(soma_com_cinco(10))\nprint(multiplica_por_dez(10))",
        "detail": "exercisios.exercisio19",
        "documentation": {}
    },
    {
        "label": "criar_funcao",
        "kind": 2,
        "importPath": "exercisios.exercisio19",
        "description": "exercisios.exercisio19",
        "peekOfCode": "def criar_funcao(funcao, x):\n    def interna(y):  # scopo faz com que adie a execuçao da função\n        return funcao(x, y)\n    return interna\nsoma_com_cinco = criar_funcao(soma, 5)\nmultiplica_por_dez = criar_funcao(multiplica, 10)\nprint(soma_com_cinco(10))\nprint(multiplica_por_dez(10))",
        "detail": "exercisios.exercisio19",
        "documentation": {}
    },
    {
        "label": "soma_com_cinco",
        "kind": 5,
        "importPath": "exercisios.exercisio19",
        "description": "exercisios.exercisio19",
        "peekOfCode": "soma_com_cinco = criar_funcao(soma, 5)\nmultiplica_por_dez = criar_funcao(multiplica, 10)\nprint(soma_com_cinco(10))\nprint(multiplica_por_dez(10))",
        "detail": "exercisios.exercisio19",
        "documentation": {}
    },
    {
        "label": "multiplica_por_dez",
        "kind": 5,
        "importPath": "exercisios.exercisio19",
        "description": "exercisios.exercisio19",
        "peekOfCode": "multiplica_por_dez = criar_funcao(multiplica, 10)\nprint(soma_com_cinco(10))\nprint(multiplica_por_dez(10))",
        "detail": "exercisios.exercisio19",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "exercisios.exercisio2",
        "description": "exercisios.exercisio2",
        "peekOfCode": "nome = 'filipa'\naltura = 1.60\npeso = 50\nimc = peso/(altura**2)\nprint(f'O {nome} tem {altura} de altura, \\n pesa {peso} quilos e seu IMC é {imc:.2f}')",
        "detail": "exercisios.exercisio2",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "exercisios.exercisio2",
        "description": "exercisios.exercisio2",
        "peekOfCode": "altura = 1.60\npeso = 50\nimc = peso/(altura**2)\nprint(f'O {nome} tem {altura} de altura, \\n pesa {peso} quilos e seu IMC é {imc:.2f}')",
        "detail": "exercisios.exercisio2",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "exercisios.exercisio2",
        "description": "exercisios.exercisio2",
        "peekOfCode": "peso = 50\nimc = peso/(altura**2)\nprint(f'O {nome} tem {altura} de altura, \\n pesa {peso} quilos e seu IMC é {imc:.2f}')",
        "detail": "exercisios.exercisio2",
        "documentation": {}
    },
    {
        "label": "imc",
        "kind": 5,
        "importPath": "exercisios.exercisio2",
        "description": "exercisios.exercisio2",
        "peekOfCode": "imc = peso/(altura**2)\nprint(f'O {nome} tem {altura} de altura, \\n pesa {peso} quilos e seu IMC é {imc:.2f}')",
        "detail": "exercisios.exercisio2",
        "documentation": {}
    },
    {
        "label": "qual_maior_lista",
        "kind": 2,
        "importPath": "exercisios.exercisio20",
        "description": "exercisios.exercisio20",
        "peekOfCode": "def qual_maior_lista(l1=None,l2=None):\n    lis1 = []\n    lis2 = []\n    if len(l1)< len(l2):\n        lis1 = copy.deepcopy(l1)\n        lis2 = copy.deepcopy(l2)\n    else:\n        lis1 = copy.deepcopy(l2)\n        lis2 = copy.deepcopy(l1)\n    return lis1,lis2",
        "detail": "exercisios.exercisio20",
        "documentation": {}
    },
    {
        "label": "unir_pelo_menor",
        "kind": 2,
        "importPath": "exercisios.exercisio20",
        "description": "exercisios.exercisio20",
        "peekOfCode": "def unir_pelo_menor(l1,l2):\n    lis1,lis2 = qual_maior_lista(l1,l2)  \n    lis_unida =[]\n    for num in range(len(lis1)):\n        lis_unida.append((lis1[num],lis2[num]))\n    return lis_unida\nprint(unir_pelo_menor(sigla,regiao))     \n#ou\ndef ziper(lista1,lista2):\n    intervalo_maximo = min(len(lista1),len(lista2))",
        "detail": "exercisios.exercisio20",
        "documentation": {}
    },
    {
        "label": "ziper",
        "kind": 2,
        "importPath": "exercisios.exercisio20",
        "description": "exercisios.exercisio20",
        "peekOfCode": "def ziper(lista1,lista2):\n    intervalo_maximo = min(len(lista1),len(lista2))\n    return [\n        (lista1[i],lista2[i]) for i in range(intervalo_maximo)\n    ]\nprint(ziper(regiao,sigla))\n#ou \nprint(list(zip(regiao,sigla))) #apartir da menor lista\nprint(list(zip_longest(regiao,sigla,fillvalue='Sem região'))) #apartir da maior lista",
        "detail": "exercisios.exercisio20",
        "documentation": {}
    },
    {
        "label": "sigla",
        "kind": 5,
        "importPath": "exercisios.exercisio20",
        "description": "exercisios.exercisio20",
        "peekOfCode": "sigla = ['BA', 'SP', 'MG', 'RJ']\ndef qual_maior_lista(l1=None,l2=None):\n    lis1 = []\n    lis2 = []\n    if len(l1)< len(l2):\n        lis1 = copy.deepcopy(l1)\n        lis2 = copy.deepcopy(l2)\n    else:\n        lis1 = copy.deepcopy(l2)\n        lis2 = copy.deepcopy(l1)",
        "detail": "exercisios.exercisio20",
        "documentation": {}
    },
    {
        "label": "soma_lista",
        "kind": 2,
        "importPath": "exercisios.exercisio21",
        "description": "exercisios.exercisio21",
        "peekOfCode": "def soma_lista(l1,l2):\n    entrevalo_maximo = min(len(l1),len(l2))\n    return[\n        (l1[i]+l2[i]) for i in range(entrevalo_maximo)\n    ]\nprint(soma_lista(lista_a,lista_b))\n#ou para qualquer ligua de prog\nlista_soma = []\nfor i in range(min(len(lista_a),len(lista_b))):\n    lista_soma.append(lista_a[i]+lista_b[i])",
        "detail": "exercisios.exercisio21",
        "documentation": {}
    },
    {
        "label": "lista_soma",
        "kind": 5,
        "importPath": "exercisios.exercisio21",
        "description": "exercisios.exercisio21",
        "peekOfCode": "lista_soma = []\nfor i in range(min(len(lista_a),len(lista_b))):\n    lista_soma.append(lista_a[i]+lista_b[i])\nprint(lista_soma)\n#ou\nlista_soma2 =[]\nfor i,_ in enumerate(lista_b):\n    lista_soma2.append(lista_a[i]+lista_b[i])\nprint(lista_soma2)\n#ou",
        "detail": "exercisios.exercisio21",
        "documentation": {}
    },
    {
        "label": "lista_soma3",
        "kind": 5,
        "importPath": "exercisios.exercisio21",
        "description": "exercisios.exercisio21",
        "peekOfCode": "lista_soma3 = [x + y for x,y in zip(lista_a,lista_b)]\nprint(lista_soma3)\n#ou para capeturar todos os valores\nfrom itertools import zip_longest\nlista_a = [10, 2, 3, 4, 5]\nlista_b = [12, 2, 3, 6, 50, 60, 70]\nlista_soma = [x + y for x, y in zip_longest(lista_a, lista_b, fillvalue=0)]\nprint(lista_soma)  # [22, 4, 6, 10, 55, 60, 70]",
        "detail": "exercisios.exercisio21",
        "documentation": {}
    },
    {
        "label": "lista_a",
        "kind": 5,
        "importPath": "exercisios.exercisio21",
        "description": "exercisios.exercisio21",
        "peekOfCode": "lista_a = [10, 2, 3, 4, 5]\nlista_b = [12, 2, 3, 6, 50, 60, 70]\nlista_soma = [x + y for x, y in zip_longest(lista_a, lista_b, fillvalue=0)]\nprint(lista_soma)  # [22, 4, 6, 10, 55, 60, 70]",
        "detail": "exercisios.exercisio21",
        "documentation": {}
    },
    {
        "label": "lista_b",
        "kind": 5,
        "importPath": "exercisios.exercisio21",
        "description": "exercisios.exercisio21",
        "peekOfCode": "lista_b = [12, 2, 3, 6, 50, 60, 70]\nlista_soma = [x + y for x, y in zip_longest(lista_a, lista_b, fillvalue=0)]\nprint(lista_soma)  # [22, 4, 6, 10, 55, 60, 70]",
        "detail": "exercisios.exercisio21",
        "documentation": {}
    },
    {
        "label": "lista_soma",
        "kind": 5,
        "importPath": "exercisios.exercisio21",
        "description": "exercisios.exercisio21",
        "peekOfCode": "lista_soma = [x + y for x, y in zip_longest(lista_a, lista_b, fillvalue=0)]\nprint(lista_soma)  # [22, 4, 6, 10, 55, 60, 70]",
        "detail": "exercisios.exercisio21",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "exercisios.exercisio22",
        "description": "exercisios.exercisio22",
        "peekOfCode": "def list(tasks):\n    print()\n    if not tasks:\n        print('any task for list')\n        print()\n        return\n    print('tasks: ')\n    for task in tasks:\n        print(f'\\t{task}')\n    print()",
        "detail": "exercisios.exercisio22",
        "documentation": {}
    },
    {
        "label": "undo",
        "kind": 2,
        "importPath": "exercisios.exercisio22",
        "description": "exercisios.exercisio22",
        "peekOfCode": "def undo(tasks,tasks_undo):\n    print()\n    if not tasks:\n        print('any task for undo')\n        print()\n        return\n    task = tasks.pop()\n    tasks_undo.append(task)\n    print()\ndef redo(tasks,tasks_undo):",
        "detail": "exercisios.exercisio22",
        "documentation": {}
    },
    {
        "label": "redo",
        "kind": 2,
        "importPath": "exercisios.exercisio22",
        "description": "exercisios.exercisio22",
        "peekOfCode": "def redo(tasks,tasks_undo):\n    print()\n    if not tasks_undo:\n        print('any task for redo')\n        print()\n        return\n    task = tasks_undo.pop()\n    tasks.append(task)\n    print()\ndef add(task,tasks):",
        "detail": "exercisios.exercisio22",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "exercisios.exercisio22",
        "description": "exercisios.exercisio22",
        "peekOfCode": "def add(task,tasks):\n    print()\n    task = task.strip()\n    tasks.append(task)\n    print()\ntasks = []\ntasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')",
        "detail": "exercisios.exercisio22",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "exercisios.exercisio22",
        "description": "exercisios.exercisio22",
        "peekOfCode": "tasks = []\ntasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')\n    if task == 'list':\n        list(tasks)\n        continue\n    elif task == 'undo':\n        undo(tasks,tasks_undo)",
        "detail": "exercisios.exercisio22",
        "documentation": {}
    },
    {
        "label": "tasks_undo",
        "kind": 5,
        "importPath": "exercisios.exercisio22",
        "description": "exercisios.exercisio22",
        "peekOfCode": "tasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')\n    if task == 'list':\n        list(tasks)\n        continue\n    elif task == 'undo':\n        undo(tasks,tasks_undo)\n        list(tasks)",
        "detail": "exercisios.exercisio22",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melhorado",
        "description": "exercisios.exercisio22_melhorado",
        "peekOfCode": "def list(tasks):\n    print()\n    if not tasks:\n        print('any task for list')\n        print()\n        return\n    print('tasks: ')\n    for task in tasks:\n        print(f'\\t{task}')\n    print()",
        "detail": "exercisios.exercisio22_melhorado",
        "documentation": {}
    },
    {
        "label": "undo",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melhorado",
        "description": "exercisios.exercisio22_melhorado",
        "peekOfCode": "def undo(tasks,tasks_undo):\n    print()\n    if not tasks:\n        print('any task for undo')\n        print()\n        return\n    task = tasks.pop()\n    tasks_undo.append(task)\n    print()\ndef redo(tasks,tasks_undo):",
        "detail": "exercisios.exercisio22_melhorado",
        "documentation": {}
    },
    {
        "label": "redo",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melhorado",
        "description": "exercisios.exercisio22_melhorado",
        "peekOfCode": "def redo(tasks,tasks_undo):\n    print()\n    if not tasks_undo:\n        print('any task for redo')\n        print()\n        return\n    task = tasks_undo.pop()\n    tasks.append(task)\n    print()\ndef add(task,tasks):",
        "detail": "exercisios.exercisio22_melhorado",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melhorado",
        "description": "exercisios.exercisio22_melhorado",
        "peekOfCode": "def add(task,tasks):\n    print()\n    task = task.strip()\n    tasks.append(task)\n    print()\ntasks = []\ntasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')",
        "detail": "exercisios.exercisio22_melhorado",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "exercisios.exercisio22_melhorado",
        "description": "exercisios.exercisio22_melhorado",
        "peekOfCode": "tasks = []\ntasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')\n    comands ={\n        'list': lambda :list(tasks),\n        'undo': lambda :undo(tasks,tasks_undo),\n        'redo': lambda :redo(tasks,tasks_undo),\n        'clear':lambda: os.system('cls'),",
        "detail": "exercisios.exercisio22_melhorado",
        "documentation": {}
    },
    {
        "label": "tasks_undo",
        "kind": 5,
        "importPath": "exercisios.exercisio22_melhorado",
        "description": "exercisios.exercisio22_melhorado",
        "peekOfCode": "tasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')\n    comands ={\n        'list': lambda :list(tasks),\n        'undo': lambda :undo(tasks,tasks_undo),\n        'redo': lambda :redo(tasks,tasks_undo),\n        'clear':lambda: os.system('cls'),\n        'add':lambda: add(task,tasks)",
        "detail": "exercisios.exercisio22_melhorado",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "def list(tasks):\n    print()\n    if not tasks:\n        print('any task for list')\n        print()\n        return\n    print('tasks: ')\n    for task in tasks:\n        print(f'\\t{task}')\n    print()",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "undo",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "def undo(tasks,tasks_undo):\n    print()\n    if not tasks:\n        print('any task for undo')\n        print()\n        return\n    task = tasks.pop()\n    tasks_undo.append(task)\n    print()\ndef redo(tasks,tasks_undo):",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "redo",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "def redo(tasks,tasks_undo):\n    print()\n    if not tasks_undo:\n        print('any task for redo')\n        print()\n        return\n    task = tasks_undo.pop()\n    tasks.append(task)\n    print()\ndef add(task,tasks):",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "def add(task,tasks):\n    print()\n    task = task.strip()\n    tasks.append(task)\n    print()\ndef read(tasks,edd_arq):\n    data = []\n    try:\n        with open(edd_arq,'r',encoding='utf8') as arq:\n            data = json.load(arq)",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "def read(tasks,edd_arq):\n    data = []\n    try:\n        with open(edd_arq,'r',encoding='utf8') as arq:\n            data = json.load(arq)\n    except FileNotFoundError:\n        print('Arq not found')\n        save(tasks,edd_arq)\n    return data\ndef save(tasks,edd_arq):",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "def save(tasks,edd_arq):\n    dados = tasks\n    with open(edd_arq,'w',encoding='utf8') as arq:\n            dados = json.dump(tasks, arq, indent=2, ensure_ascii=False)\n    return dados\nEDD_ARQ = 'exercisio22_melh.json'\ntasks = read([],EDD_ARQ)\ntasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "EDD_ARQ",
        "kind": 5,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "EDD_ARQ = 'exercisio22_melh.json'\ntasks = read([],EDD_ARQ)\ntasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')\n    comands ={\n        'list': lambda :list(tasks),\n        'undo': lambda :undo(tasks,tasks_undo),\n        'redo': lambda :redo(tasks,tasks_undo),",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "tasks = read([],EDD_ARQ)\ntasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')\n    comands ={\n        'list': lambda :list(tasks),\n        'undo': lambda :undo(tasks,tasks_undo),\n        'redo': lambda :redo(tasks,tasks_undo),\n        'clear':lambda: os.system('clear'),",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "tasks_undo",
        "kind": 5,
        "importPath": "exercisios.exercisio22_melh_json",
        "description": "exercisios.exercisio22_melh_json",
        "peekOfCode": "tasks_undo = []\nwhile True :\n    print('Comands : list , undo ,redo')\n    task = input('write one task or comand: ')\n    comands ={\n        'list': lambda :list(tasks),\n        'undo': lambda :undo(tasks,tasks_undo),\n        'redo': lambda :redo(tasks,tasks_undo),\n        'clear':lambda: os.system('clear'),\n        'add':lambda: add(task,tasks)",
        "detail": "exercisios.exercisio22_melh_json",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "class Person:\n    def __init__(self,name,age) :\n        self.name = name\n        self.age = age\np1 = Person(name='Isabel',age= 38)\np2 = Person(name='Filipa', age= 23)\np3 = Person(name='Antão' , age=24)\np4 = Person(name='Miguel',age=48)\ndataBase = [p1.__dict__,vars(p2),vars(p3),p4.__dict__]\n#print(*dataBase)",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "def save(edd,dataBase):\n    with open(edd,'w',encoding='utf8') as file :\n        json.dump(dataBase,file,ensure_ascii=False,indent=2)\nif __name__ == '__main__':\n    print('este e o main')\n    save(EDD_FILE,dataBase)",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "EDD_FILE",
        "kind": 5,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "EDD_FILE = 'exercisio23.json'\nclass Person:\n    def __init__(self,name,age) :\n        self.name = name\n        self.age = age\np1 = Person(name='Isabel',age= 38)\np2 = Person(name='Filipa', age= 23)\np3 = Person(name='Antão' , age=24)\np4 = Person(name='Miguel',age=48)\ndataBase = [p1.__dict__,vars(p2),vars(p3),p4.__dict__]",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "p1 = Person(name='Isabel',age= 38)\np2 = Person(name='Filipa', age= 23)\np3 = Person(name='Antão' , age=24)\np4 = Person(name='Miguel',age=48)\ndataBase = [p1.__dict__,vars(p2),vars(p3),p4.__dict__]\n#print(*dataBase)\ndef save(edd,dataBase):\n    with open(edd,'w',encoding='utf8') as file :\n        json.dump(dataBase,file,ensure_ascii=False,indent=2)\nif __name__ == '__main__':",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "p2",
        "kind": 5,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "p2 = Person(name='Filipa', age= 23)\np3 = Person(name='Antão' , age=24)\np4 = Person(name='Miguel',age=48)\ndataBase = [p1.__dict__,vars(p2),vars(p3),p4.__dict__]\n#print(*dataBase)\ndef save(edd,dataBase):\n    with open(edd,'w',encoding='utf8') as file :\n        json.dump(dataBase,file,ensure_ascii=False,indent=2)\nif __name__ == '__main__':\n    print('este e o main')",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "p3",
        "kind": 5,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "p3 = Person(name='Antão' , age=24)\np4 = Person(name='Miguel',age=48)\ndataBase = [p1.__dict__,vars(p2),vars(p3),p4.__dict__]\n#print(*dataBase)\ndef save(edd,dataBase):\n    with open(edd,'w',encoding='utf8') as file :\n        json.dump(dataBase,file,ensure_ascii=False,indent=2)\nif __name__ == '__main__':\n    print('este e o main')\n    save(EDD_FILE,dataBase)",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "p4",
        "kind": 5,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "p4 = Person(name='Miguel',age=48)\ndataBase = [p1.__dict__,vars(p2),vars(p3),p4.__dict__]\n#print(*dataBase)\ndef save(edd,dataBase):\n    with open(edd,'w',encoding='utf8') as file :\n        json.dump(dataBase,file,ensure_ascii=False,indent=2)\nif __name__ == '__main__':\n    print('este e o main')\n    save(EDD_FILE,dataBase)",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "dataBase",
        "kind": 5,
        "importPath": "exercisios.exercisio23_a",
        "description": "exercisios.exercisio23_a",
        "peekOfCode": "dataBase = [p1.__dict__,vars(p2),vars(p3),p4.__dict__]\n#print(*dataBase)\ndef save(edd,dataBase):\n    with open(edd,'w',encoding='utf8') as file :\n        json.dump(dataBase,file,ensure_ascii=False,indent=2)\nif __name__ == '__main__':\n    print('este e o main')\n    save(EDD_FILE,dataBase)",
        "detail": "exercisios.exercisio23_a",
        "documentation": {}
    },
    {
        "label": "Carro",
        "kind": 6,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "class Carro:\n    def __init__(self,nome):\n        self.nome = nome\n        self._motor = None\n        self._fabricante = None\n    @property\n    def motor(self):\n        return self._motor\n    @motor.setter\n    def motor(self,nome):",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "Motor",
        "kind": 6,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "class Motor:\n    def __init__(self,nome):\n        self.nome = nome\nclass fabricante:\n    def __init__(self,nome):\n        self.nome = nome\nfusca = Carro('Fusca')\nvolkswagen = fabricante('Volkswagen')\nmotor_1_0 = Motor('1.0')\nfusca.fabricante = volkswagen",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fabricante",
        "kind": 6,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "class fabricante:\n    def __init__(self,nome):\n        self.nome = nome\nfusca = Carro('Fusca')\nvolkswagen = fabricante('Volkswagen')\nmotor_1_0 = Motor('1.0')\nfusca.fabricante = volkswagen\nfusca.motor = motor_1_0\nprint(fusca.nome,fusca.fabricante.nome,fusca.motor.nome)\nfiat_uno = Carro('Uno')",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fusca",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "fusca = Carro('Fusca')\nvolkswagen = fabricante('Volkswagen')\nmotor_1_0 = Motor('1.0')\nfusca.fabricante = volkswagen\nfusca.motor = motor_1_0\nprint(fusca.nome,fusca.fabricante.nome,fusca.motor.nome)\nfiat_uno = Carro('Uno')\nfiat = fabricante('Fiat')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "volkswagen",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "volkswagen = fabricante('Volkswagen')\nmotor_1_0 = Motor('1.0')\nfusca.fabricante = volkswagen\nfusca.motor = motor_1_0\nprint(fusca.nome,fusca.fabricante.nome,fusca.motor.nome)\nfiat_uno = Carro('Uno')\nfiat = fabricante('Fiat')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "motor_1_0",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "motor_1_0 = Motor('1.0')\nfusca.fabricante = volkswagen\nfusca.motor = motor_1_0\nprint(fusca.nome,fusca.fabricante.nome,fusca.motor.nome)\nfiat_uno = Carro('Uno')\nfiat = fabricante('Fiat')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)\nfocus = Carro('Focus titanium')",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fusca.fabricante",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "fusca.fabricante = volkswagen\nfusca.motor = motor_1_0\nprint(fusca.nome,fusca.fabricante.nome,fusca.motor.nome)\nfiat_uno = Carro('Uno')\nfiat = fabricante('Fiat')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)\nfocus = Carro('Focus titanium')\nford = fabricante('Ford')",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fusca.motor",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "fusca.motor = motor_1_0\nprint(fusca.nome,fusca.fabricante.nome,fusca.motor.nome)\nfiat_uno = Carro('Uno')\nfiat = fabricante('Fiat')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)\nfocus = Carro('Focus titanium')\nford = fabricante('Ford')\nmotor_2_0 = Motor('2.0')",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fiat_uno",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "fiat_uno = Carro('Uno')\nfiat = fabricante('Fiat')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)\nfocus = Carro('Focus titanium')\nford = fabricante('Ford')\nmotor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fiat",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "fiat = fabricante('Fiat')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)\nfocus = Carro('Focus titanium')\nford = fabricante('Ford')\nmotor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fiat_uno.fabricante",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "fiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)\nfocus = Carro('Focus titanium')\nford = fabricante('Ford')\nmotor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "fiat_uno.motor",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "fiat_uno.motor = motor_1_0\nprint(fiat_uno.nome,fiat_uno.fabricante.nome,fiat_uno.motor.nome)\nfocus = Carro('Focus titanium')\nford = fabricante('Ford')\nmotor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "focus",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "focus = Carro('Focus titanium')\nford = fabricante('Ford')\nmotor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "ford",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "ford = fabricante('Ford')\nmotor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "motor_2_0",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "motor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "focus.fabricante",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "focus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "focus.motor",
        "kind": 5,
        "importPath": "exercisios.exercisio24",
        "description": "exercisios.exercisio24",
        "peekOfCode": "focus.motor = motor_2_0\nprint(focus.nome,focus.fabricante.nome,focus.motor.nome)",
        "detail": "exercisios.exercisio24",
        "documentation": {}
    },
    {
        "label": "primeiro_valor",
        "kind": 5,
        "importPath": "exercisios.exercisio3",
        "description": "exercisios.exercisio3",
        "peekOfCode": "primeiro_valor = input('digit um valor: ')\nsegundo_valor = input('digit outro valor: ')\nif primeiro_valor > segundo_valor:\n    print(f'{primeiro_valor=} é maior que {segundo_valor=}.')\nelif primeiro_valor < segundo_valor:\n    print(f'O segundo valor ({segundo_valor}) é maior que o primeiro ({primeiro_valor}).')\nelse:\n    print(f'Os valores são iguais ({primeiro_valor} = {segundo_valor}).')",
        "detail": "exercisios.exercisio3",
        "documentation": {}
    },
    {
        "label": "segundo_valor",
        "kind": 5,
        "importPath": "exercisios.exercisio3",
        "description": "exercisios.exercisio3",
        "peekOfCode": "segundo_valor = input('digit outro valor: ')\nif primeiro_valor > segundo_valor:\n    print(f'{primeiro_valor=} é maior que {segundo_valor=}.')\nelif primeiro_valor < segundo_valor:\n    print(f'O segundo valor ({segundo_valor}) é maior que o primeiro ({primeiro_valor}).')\nelse:\n    print(f'Os valores são iguais ({primeiro_valor} = {segundo_valor}).')",
        "detail": "exercisios.exercisio3",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "exercisios.exercisio4",
        "description": "exercisios.exercisio4",
        "peekOfCode": "nome = input(\"Digite o nome: \")\nidade = input(\"Digite a idade: \")\nif nome  and idade  :\n    print(f\"O nome digitado foi {nome}\")\n    print(f\"o seu nome invertido é {nome[::-1]}\")\n    if \" \" in nome:\n        print(f\"O nome {nome} contém espaços.\")\n    else:\n        print(f\"O nome {nome} não contém espaços.\")\n    print(f\"o seu nome contem {len(nome)} letras\")",
        "detail": "exercisios.exercisio4",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "exercisios.exercisio4",
        "description": "exercisios.exercisio4",
        "peekOfCode": "idade = input(\"Digite a idade: \")\nif nome  and idade  :\n    print(f\"O nome digitado foi {nome}\")\n    print(f\"o seu nome invertido é {nome[::-1]}\")\n    if \" \" in nome:\n        print(f\"O nome {nome} contém espaços.\")\n    else:\n        print(f\"O nome {nome} não contém espaços.\")\n    print(f\"o seu nome contem {len(nome)} letras\")\n    print(f\"A primeira letra do seu nome é {nome[0]}\")",
        "detail": "exercisios.exercisio4",
        "documentation": {}
    },
    {
        "label": "velocidade",
        "kind": 5,
        "importPath": "exercisios.exercisio5",
        "description": "exercisios.exercisio5",
        "peekOfCode": "velocidade = 60\nlocal_carro = 100\nRADAR_1 =60\nLOCAL_1 = 100\nRADAR_RANGE = 1 \nvelocidade_multa_radar_1 = velocidade > RADAR_1\ncarro_passou_radar_1 = local_carro >= LOCAL_1 - RADAR_RANGE and local_carro <= LOCAL_1 + RADAR_RANGE\ncarro_multado_radar_1 = carro_passou_radar_1 and velocidade_multa_radar_1\nif carro_passou_radar_1:\n    print(f\"O carro passou pelo radar 1\")",
        "detail": "exercisios.exercisio5",
        "documentation": {}
    },
    {
        "label": "local_carro",
        "kind": 5,
        "importPath": "exercisios.exercisio5",
        "description": "exercisios.exercisio5",
        "peekOfCode": "local_carro = 100\nRADAR_1 =60\nLOCAL_1 = 100\nRADAR_RANGE = 1 \nvelocidade_multa_radar_1 = velocidade > RADAR_1\ncarro_passou_radar_1 = local_carro >= LOCAL_1 - RADAR_RANGE and local_carro <= LOCAL_1 + RADAR_RANGE\ncarro_multado_radar_1 = carro_passou_radar_1 and velocidade_multa_radar_1\nif carro_passou_radar_1:\n    print(f\"O carro passou pelo radar 1\")\nif velocidade_multa_radar_1:",
        "detail": "exercisios.exercisio5",
        "documentation": {}
    },
    {
        "label": "LOCAL_1",
        "kind": 5,
        "importPath": "exercisios.exercisio5",
        "description": "exercisios.exercisio5",
        "peekOfCode": "LOCAL_1 = 100\nRADAR_RANGE = 1 \nvelocidade_multa_radar_1 = velocidade > RADAR_1\ncarro_passou_radar_1 = local_carro >= LOCAL_1 - RADAR_RANGE and local_carro <= LOCAL_1 + RADAR_RANGE\ncarro_multado_radar_1 = carro_passou_radar_1 and velocidade_multa_radar_1\nif carro_passou_radar_1:\n    print(f\"O carro passou pelo radar 1\")\nif velocidade_multa_radar_1:\n    print(f\"O carro estava a {velocidade}km/h em uma zona de {RADAR_1}km/h\")\nif carro_multado_radar_1:",
        "detail": "exercisios.exercisio5",
        "documentation": {}
    },
    {
        "label": "RADAR_RANGE",
        "kind": 5,
        "importPath": "exercisios.exercisio5",
        "description": "exercisios.exercisio5",
        "peekOfCode": "RADAR_RANGE = 1 \nvelocidade_multa_radar_1 = velocidade > RADAR_1\ncarro_passou_radar_1 = local_carro >= LOCAL_1 - RADAR_RANGE and local_carro <= LOCAL_1 + RADAR_RANGE\ncarro_multado_radar_1 = carro_passou_radar_1 and velocidade_multa_radar_1\nif carro_passou_radar_1:\n    print(f\"O carro passou pelo radar 1\")\nif velocidade_multa_radar_1:\n    print(f\"O carro estava a {velocidade}km/h em uma zona de {RADAR_1}km/h\")\nif carro_multado_radar_1:\n    print(f\"O carro foi multado pelo radar 1 por estar a {velocidade}km/h em uma zona de {RADAR_1}km/h\")",
        "detail": "exercisios.exercisio5",
        "documentation": {}
    },
    {
        "label": "velocidade_multa_radar_1",
        "kind": 5,
        "importPath": "exercisios.exercisio5",
        "description": "exercisios.exercisio5",
        "peekOfCode": "velocidade_multa_radar_1 = velocidade > RADAR_1\ncarro_passou_radar_1 = local_carro >= LOCAL_1 - RADAR_RANGE and local_carro <= LOCAL_1 + RADAR_RANGE\ncarro_multado_radar_1 = carro_passou_radar_1 and velocidade_multa_radar_1\nif carro_passou_radar_1:\n    print(f\"O carro passou pelo radar 1\")\nif velocidade_multa_radar_1:\n    print(f\"O carro estava a {velocidade}km/h em uma zona de {RADAR_1}km/h\")\nif carro_multado_radar_1:\n    print(f\"O carro foi multado pelo radar 1 por estar a {velocidade}km/h em uma zona de {RADAR_1}km/h\")",
        "detail": "exercisios.exercisio5",
        "documentation": {}
    },
    {
        "label": "carro_passou_radar_1",
        "kind": 5,
        "importPath": "exercisios.exercisio5",
        "description": "exercisios.exercisio5",
        "peekOfCode": "carro_passou_radar_1 = local_carro >= LOCAL_1 - RADAR_RANGE and local_carro <= LOCAL_1 + RADAR_RANGE\ncarro_multado_radar_1 = carro_passou_radar_1 and velocidade_multa_radar_1\nif carro_passou_radar_1:\n    print(f\"O carro passou pelo radar 1\")\nif velocidade_multa_radar_1:\n    print(f\"O carro estava a {velocidade}km/h em uma zona de {RADAR_1}km/h\")\nif carro_multado_radar_1:\n    print(f\"O carro foi multado pelo radar 1 por estar a {velocidade}km/h em uma zona de {RADAR_1}km/h\")",
        "detail": "exercisios.exercisio5",
        "documentation": {}
    },
    {
        "label": "carro_multado_radar_1",
        "kind": 5,
        "importPath": "exercisios.exercisio5",
        "description": "exercisios.exercisio5",
        "peekOfCode": "carro_multado_radar_1 = carro_passou_radar_1 and velocidade_multa_radar_1\nif carro_passou_radar_1:\n    print(f\"O carro passou pelo radar 1\")\nif velocidade_multa_radar_1:\n    print(f\"O carro estava a {velocidade}km/h em uma zona de {RADAR_1}km/h\")\nif carro_multado_radar_1:\n    print(f\"O carro foi multado pelo radar 1 por estar a {velocidade}km/h em uma zona de {RADAR_1}km/h\")",
        "detail": "exercisios.exercisio5",
        "documentation": {}
    },
    {
        "label": "numero",
        "kind": 5,
        "importPath": "exercisios.exercisio6",
        "description": "exercisios.exercisio6",
        "peekOfCode": "numero = input(\"Digite um número: \")\ntry:\n    if int(numero) % 2 == 0:\n        print(f\"o numero {numero} é par\")\n    else:\n        print(f\"o numero {numero} é ímpar\")\nexcept:\n    print(\"Desculpe, você não digitou um número inteiro.\")\n\"\"\"\nFaça um programa que pergunte a hora ao usuário e, baseando-se no horário ",
        "detail": "exercisios.exercisio6",
        "documentation": {}
    },
    {
        "label": "hora",
        "kind": 5,
        "importPath": "exercisios.exercisio6",
        "description": "exercisios.exercisio6",
        "peekOfCode": "hora = input(\"Que horas são? \")\ntry:\n    hora = int(hora)\n    if hora >= 0 and hora <= 11:\n        print(\"Bom dia!\")\n    elif hora >= 12 and hora <= 17:\n        print(\"Boa tarde!\")\n    else:\n        print(\"Boa noite!\")\nexcept:",
        "detail": "exercisios.exercisio6",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "exercisios.exercisio6",
        "description": "exercisios.exercisio6",
        "peekOfCode": "nome = input(\"Qual o seu nome? \")\ncondicao = nome.isdigit()\nif not condicao:\n    if len(nome) <= 4:\n        print(\"Seu nome é curto\")\n    elif len(nome) > 4 and len(nome) <= 6:\n        print(\"Seu nome é normal\")\n    else:\n        print(\"Seu nome é muito grande\")\nelse:",
        "detail": "exercisios.exercisio6",
        "documentation": {}
    },
    {
        "label": "condicao",
        "kind": 5,
        "importPath": "exercisios.exercisio6",
        "description": "exercisios.exercisio6",
        "peekOfCode": "condicao = nome.isdigit()\nif not condicao:\n    if len(nome) <= 4:\n        print(\"Seu nome é curto\")\n    elif len(nome) > 4 and len(nome) <= 6:\n        print(\"Seu nome é normal\")\n    else:\n        print(\"Seu nome é muito grande\")\nelse:\n    print(\"Desculpe, você não digitou um nome válido.\")",
        "detail": "exercisios.exercisio6",
        "documentation": {}
    },
    {
        "label": "palavra_secreta",
        "kind": 5,
        "importPath": "exercisios.exercisio9",
        "description": "exercisios.exercisio9",
        "peekOfCode": "palavra_secreta = 'perfume'\nletras_acertadas = ''\ncont = 0   \nwhile True:\n    cont += 1\n    letra = input('Digite uma letra: ')\n    if letra == letra.isdigit():\n        print('Você digitou um número!')\n        continue\n    if len(letra)!= 1:",
        "detail": "exercisios.exercisio9",
        "documentation": {}
    },
    {
        "label": "letras_acertadas",
        "kind": 5,
        "importPath": "exercisios.exercisio9",
        "description": "exercisios.exercisio9",
        "peekOfCode": "letras_acertadas = ''\ncont = 0   \nwhile True:\n    cont += 1\n    letra = input('Digite uma letra: ')\n    if letra == letra.isdigit():\n        print('Você digitou um número!')\n        continue\n    if len(letra)!= 1:\n        print('Você digitou nenhuma ou mais de uma letra!')",
        "detail": "exercisios.exercisio9",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "exercisios.exercisio9",
        "description": "exercisios.exercisio9",
        "peekOfCode": "cont = 0   \nwhile True:\n    cont += 1\n    letra = input('Digite uma letra: ')\n    if letra == letra.isdigit():\n        print('Você digitou um número!')\n        continue\n    if len(letra)!= 1:\n        print('Você digitou nenhuma ou mais de uma letra!')\n        continue",
        "detail": "exercisios.exercisio9",
        "documentation": {}
    },
    {
        "label": "listar",
        "kind": 2,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "def listar(tarefas):\n    print()\n    if not tarefas:\n        print('Nenhuma tarefa para listar')\n        return\n    print('Tarefas:')\n    for tarefa in tarefas:\n        print(f'\\t{tarefa}')\n    print()\ndef desfazer(tarefas, tarefas_refazer):",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "desfazer",
        "kind": 2,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "def desfazer(tarefas, tarefas_refazer):\n    print()\n    if not tarefas:\n        print('Nenhuma tarefa para desfazer')\n        return\n    tarefa = tarefas.pop()\n    print(f'{tarefa=} removida da lista de tarefas.')\n    tarefas_refazer.append(tarefa)\n    print()\n    listar(tarefas)",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "refazer",
        "kind": 2,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "def refazer(tarefas, tarefas_refazer):\n    print()\n    if not tarefas_refazer:\n        print('Nenhuma tarefa para refazer')\n        return\n    tarefa = tarefas_refazer.pop()\n    print(f'{tarefa=} adicionada na lista de tarefas.')\n    tarefas.append(tarefa)\n    print()\n    listar(tarefas)",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "adicionar",
        "kind": 2,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "def adicionar(tarefa, tarefas):\n    print()\n    tarefa = tarefa.strip()\n    if not tarefa:\n        print('Você não digitou uma tarefa.')\n        return\n    print(f'{tarefa=} adicionada na lista de tarefas.')\n    tarefas.append(tarefa)\n    print()\n    listar(tarefas)",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "ler",
        "kind": 2,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "def ler(tarefas, caminho_arquivo):\n    dados = []\n    try:\n        with open(caminho_arquivo, 'r', encoding='utf8') as arquivo:\n            dados = json.load(arquivo)\n    except FileNotFoundError:\n        print('Arquivo não existe')\n        salvar(tarefas, caminho_arquivo)\n    return dados\ndef salvar(tarefas, caminho_arquivo):",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "salvar",
        "kind": 2,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "def salvar(tarefas, caminho_arquivo):\n    dados = tarefas\n    with open(caminho_arquivo, 'w', encoding='utf8') as arquivo:\n        dados = json.dump(tarefas, arquivo, indent=2, ensure_ascii=False)\n    return dados\nCAMINHO_ARQUIVO = 'aula119.json'\ntarefas = ler([], CAMINHO_ARQUIVO)\ntarefas_refazer = []\nwhile True:\n    print('Comandos: listar, desfazer e refazer')",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "CAMINHO_ARQUIVO",
        "kind": 5,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "CAMINHO_ARQUIVO = 'aula119.json'\ntarefas = ler([], CAMINHO_ARQUIVO)\ntarefas_refazer = []\nwhile True:\n    print('Comandos: listar, desfazer e refazer')\n    tarefa = input('Digite uma tarefa ou comando: ')\n    comandos = {\n        'listar': lambda: listar(tarefas),\n        'desfazer': lambda: desfazer(tarefas, tarefas_refazer),\n        'refazer': lambda: refazer(tarefas, tarefas_refazer),",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "tarefas",
        "kind": 5,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "tarefas = ler([], CAMINHO_ARQUIVO)\ntarefas_refazer = []\nwhile True:\n    print('Comandos: listar, desfazer e refazer')\n    tarefa = input('Digite uma tarefa ou comando: ')\n    comandos = {\n        'listar': lambda: listar(tarefas),\n        'desfazer': lambda: desfazer(tarefas, tarefas_refazer),\n        'refazer': lambda: refazer(tarefas, tarefas_refazer),\n        'clear': lambda: os.system('clear'),",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "tarefas_refazer",
        "kind": 5,
        "importPath": "exercisios.kk",
        "description": "exercisios.kk",
        "peekOfCode": "tarefas_refazer = []\nwhile True:\n    print('Comandos: listar, desfazer e refazer')\n    tarefa = input('Digite uma tarefa ou comando: ')\n    comandos = {\n        'listar': lambda: listar(tarefas),\n        'desfazer': lambda: desfazer(tarefas, tarefas_refazer),\n        'refazer': lambda: refazer(tarefas, tarefas_refazer),\n        'clear': lambda: os.system('clear'),\n        'adicionar': lambda: adicionar(tarefa, tarefas),",
        "detail": "exercisios.kk",
        "documentation": {}
    },
    {
        "label": "Eletronico",
        "kind": 6,
        "importPath": "heranca.eletronico",
        "description": "heranca.eletronico",
        "peekOfCode": "class Eletronico:\n    def __init__(self,nome):\n        self._nome = nome\n        self._ligado = False\n    def ligar(self):\n        if not self._ligado:\n            self._ligado = True\n    def desligar(self):\n        if self._ligado:\n            self._ligado = False",
        "detail": "heranca.eletronico",
        "documentation": {}
    },
    {
        "label": "Smartphone",
        "kind": 6,
        "importPath": "heranca.eletronico",
        "description": "heranca.eletronico",
        "peekOfCode": "class Smartphone(Eletronico, LogFileMixin):\n    def ligar(self):\n        super().ligar()\n        if self._ligado:\n            msg = f'{self._nome} esta ligado'\n            self.log_success(msg)\n    def desligar(self):\n        super().desligar()\n        if not self._ligado:\n            msg = f'{self._nome} esta desligado'",
        "detail": "heranca.eletronico",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 6,
        "importPath": "heranca.log",
        "description": "heranca.log",
        "peekOfCode": "class log:\n    def _log(self,msg):\n        raise NotImplementedError('Implemente o método log')\n    def log_error(self,msg):\n        return self._log(f'Error: {msg} ')\n    def log_success(self,msg):\n        return self._log(f'Success: {msg} ')\nclass LogFileMixin(log):\n    def _log(self,msg):\n        msg_formatada = (f'{msg} ({self.__class__.__name__})')",
        "detail": "heranca.log",
        "documentation": {}
    },
    {
        "label": "LogFileMixin",
        "kind": 6,
        "importPath": "heranca.log",
        "description": "heranca.log",
        "peekOfCode": "class LogFileMixin(log):\n    def _log(self,msg):\n        msg_formatada = (f'{msg} ({self.__class__.__name__})')\n        print('save in log')\n        with open(LOG_FILE,'a') as file:\n            file.write(msg_formatada)\n            file.write('\\n')\nclass LogPrintMixin(log):\n    def _log(self,msg):\n        print(f'{msg} ({self.__class__.__name__})')",
        "detail": "heranca.log",
        "documentation": {}
    },
    {
        "label": "LogPrintMixin",
        "kind": 6,
        "importPath": "heranca.log",
        "description": "heranca.log",
        "peekOfCode": "class LogPrintMixin(log):\n    def _log(self,msg):\n        print(f'{msg} ({self.__class__.__name__})')\nif __name__ == '__main__' :  \n    lp =LogFileMixin()\n    lp.log_error('qualquer coisa')\n    lp.log_success('resoltou')\n    lf =LogFileMixin()\n    lf.log_error('qualquer coisa')\n    lf.log_success('resoltou')",
        "detail": "heranca.log",
        "documentation": {}
    },
    {
        "label": "LOG_FILE",
        "kind": 5,
        "importPath": "heranca.log",
        "description": "heranca.log",
        "peekOfCode": "LOG_FILE = Path(__file__).parent / 'log.txt'\nclass log:\n    def _log(self,msg):\n        raise NotImplementedError('Implemente o método log')\n    def log_error(self,msg):\n        return self._log(f'Error: {msg} ')\n    def log_success(self,msg):\n        return self._log(f'Success: {msg} ')\nclass LogFileMixin(log):\n    def _log(self,msg):",
        "detail": "heranca.log",
        "documentation": {}
    },
    {
        "label": "galaxy_s",
        "kind": 5,
        "importPath": "heranca.main",
        "description": "heranca.main",
        "peekOfCode": "galaxy_s = Smartphone('Galaxy S')\niphone = Smartphone('IPhone')\ngalaxy_s.ligar()\niphone.ligar()\niphone.desligar()\ngalaxy_s.desligar()",
        "detail": "heranca.main",
        "documentation": {}
    },
    {
        "label": "iphone",
        "kind": 5,
        "importPath": "heranca.main",
        "description": "heranca.main",
        "peekOfCode": "iphone = Smartphone('IPhone')\ngalaxy_s.ligar()\niphone.ligar()\niphone.desligar()\ngalaxy_s.desligar()",
        "detail": "heranca.main",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 6,
        "importPath": "heranca.teoria_abstract",
        "description": "heranca.teoria_abstract",
        "peekOfCode": "class log(ABC):\n    @abstractmethod\n    def _log(self,msg):...\n    def log_error(self,msg):\n        return self._log(f'Error: {msg} ')\n    def log_success(self,msg):\n        return self._log(f'Success: {msg} ')\nclass LogPrintMixin(log):\n    def _log(self,msg):\n        print(f'{msg} ({self.__class__.__name__})')",
        "detail": "heranca.teoria_abstract",
        "documentation": {}
    },
    {
        "label": "LogPrintMixin",
        "kind": 6,
        "importPath": "heranca.teoria_abstract",
        "description": "heranca.teoria_abstract",
        "peekOfCode": "class LogPrintMixin(log):\n    def _log(self,msg):\n        print(f'{msg} ({self.__class__.__name__})')",
        "detail": "heranca.teoria_abstract",
        "documentation": {}
    },
    {
        "label": "AbstractFoo",
        "kind": 6,
        "importPath": "heranca.teoria_abstract2",
        "description": "heranca.teoria_abstract2",
        "peekOfCode": "class AbstractFoo(ABC):\n    def __init__(self, name):\n        self._name = None\n        self.name = name\n    @property\n    def name(self):\n        return self._name\n    @name.setter\n    @abstractmethod\n    def name(self, name): ...",
        "detail": "heranca.teoria_abstract2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "heranca.teoria_abstract2",
        "description": "heranca.teoria_abstract2",
        "peekOfCode": "class Foo(AbstractFoo):\n    def __init__(self, name):\n        super().__init__(name)\n        #print('Sou inútil')\n    @AbstractFoo.name.setter\n    def name(self, name):\n        self._name = name\n        #print('p')\nfoo = Foo('Bar')\nprint(foo.name)",
        "detail": "heranca.teoria_abstract2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "heranca.teoria_abstract2",
        "description": "heranca.teoria_abstract2",
        "peekOfCode": "foo = Foo('Bar')\nprint(foo.name)",
        "detail": "heranca.teoria_abstract2",
        "documentation": {}
    },
    {
        "label": "CallMe",
        "kind": 6,
        "importPath": "heranca.teoria_call",
        "description": "heranca.teoria_call",
        "peekOfCode": "class CallMe:\n    def __init__(self, phone):\n        self.phone = phone\n    def __call__(self, nome):\n        print(nome, 'está chamando', self.phone)\n        return 2134\ncall1 = CallMe('23945876545')\nretorno = call1('Luiz Otávio')\nprint(retorno)",
        "detail": "heranca.teoria_call",
        "documentation": {}
    },
    {
        "label": "call1",
        "kind": 5,
        "importPath": "heranca.teoria_call",
        "description": "heranca.teoria_call",
        "peekOfCode": "call1 = CallMe('23945876545')\nretorno = call1('Luiz Otávio')\nprint(retorno)",
        "detail": "heranca.teoria_call",
        "documentation": {}
    },
    {
        "label": "retorno",
        "kind": 5,
        "importPath": "heranca.teoria_call",
        "description": "heranca.teoria_call",
        "peekOfCode": "retorno = call1('Luiz Otávio')\nprint(retorno)",
        "detail": "heranca.teoria_call",
        "documentation": {}
    },
    {
        "label": "MyOpen",
        "kind": 6,
        "importPath": "heranca.teoria_context_manager",
        "description": "heranca.teoria_context_manager",
        "peekOfCode": "class MyOpen:\n    def __init__(self, caminho_arquivo, modo):\n        self.caminho_arquivo = caminho_arquivo\n        self.modo = modo\n        self._arquivo = None\n    def __enter__(self):\n        print('ABRINDO ARQUIVO')\n        self._arquivo = open(self.caminho_arquivo, self.modo, encoding='utf8')\n        return self._arquivo\n    def __exit__(self, class_exception, exception_, traceback_):",
        "detail": "heranca.teoria_context_manager",
        "documentation": {}
    },
    {
        "label": "my_open",
        "kind": 2,
        "importPath": "heranca.teoria_context_manager_contexlib",
        "description": "heranca.teoria_context_manager_contexlib",
        "peekOfCode": "def my_open(caminho_arquivo, modo):\n    try:\n        print('Abrindo arquivo')\n        arquivo = open(caminho_arquivo, modo, encoding='utf8')\n        yield arquivo\n    except Exception as e:\n        print('Ocorreu erro', e)\n    finally:\n        print('Fechando arquivo')\n        arquivo.close()",
        "detail": "heranca.teoria_context_manager_contexlib",
        "documentation": {}
    },
    {
        "label": "MyOpen",
        "kind": 6,
        "importPath": "heranca.teoria_context_manager_execption",
        "description": "heranca.teoria_context_manager_execption",
        "peekOfCode": "class MyOpen:\n    def __init__(self, caminho_arquivo, modo):\n        self.caminho_arquivo = caminho_arquivo\n        self.modo = modo\n        self._arquivo = None\n    def __enter__(self):\n        print('ABRINDO ARQUIVO')\n        self._arquivo = open(self.caminho_arquivo, self.modo, encoding='utf8')\n        return self._arquivo\n    def __exit__(self, class_exception, exception_, traceback_):",
        "detail": "heranca.teoria_context_manager_execption",
        "documentation": {}
    },
    {
        "label": "Multiplicar",
        "kind": 6,
        "importPath": "heranca.teoria_decorated_class",
        "description": "heranca.teoria_decorated_class",
        "peekOfCode": "class Multiplicar:\n    def __init__(self, multiplicador):\n        self._multiplicador = multiplicador\n    def __call__(self, func):\n        def interna(*args, **kwargs):\n            resultado = func(*args, **kwargs)\n            return resultado * self._multiplicador\n        return interna\n@Multiplicar(2)\ndef soma(x, y):",
        "detail": "heranca.teoria_decorated_class",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "heranca.teoria_decorated_class",
        "description": "heranca.teoria_decorated_class",
        "peekOfCode": "def soma(x, y):\n    return x + y\ndois_mais_quatro = soma(2, 4)\nprint(dois_mais_quatro)",
        "detail": "heranca.teoria_decorated_class",
        "documentation": {}
    },
    {
        "label": "dois_mais_quatro",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_class",
        "description": "heranca.teoria_decorated_class",
        "peekOfCode": "dois_mais_quatro = soma(2, 4)\nprint(dois_mais_quatro)",
        "detail": "heranca.teoria_decorated_class",
        "documentation": {}
    },
    {
        "label": "Time",
        "kind": 6,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "class Time:\n    def __init__(self,name) :\n        self.name = name\n@add_repr   \nclass Planet:\n    def __init__(self,name):\n        self.name = name\n    @my_planet   \n    def say_name(self):\n        return f'Name of this Planet is {self.name}'",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "Planet",
        "kind": 6,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "class Planet:\n    def __init__(self,name):\n        self.name = name\n    @my_planet   \n    def say_name(self):\n        return f'Name of this Planet is {self.name}'\n#Time = add_repr(Time)\n#Planeta = add_repr(Planeta)\nportugal = Time('Portugal')\nbrazil = Time('Brazil')",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "my_repr",
        "kind": 2,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "def my_repr(self):\n    class_name = self.__class__.__name__\n    class_dict =self.__dict__\n    class_repr = f'{class_name}({class_dict})'\n    return class_repr\ndef add_repr(cls):\n    cls.__repr__ = my_repr\n    return cls\ndef my_planet(method):\n    def intern(self,*args,**kwarg):",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "add_repr",
        "kind": 2,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "def add_repr(cls):\n    cls.__repr__ = my_repr\n    return cls\ndef my_planet(method):\n    def intern(self,*args,**kwarg):\n        result = method(self,*args,**kwarg)\n        if 'Earth' in result:\n            return 'You are in home'\n        return result\n    return intern",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "my_planet",
        "kind": 2,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "def my_planet(method):\n    def intern(self,*args,**kwarg):\n        result = method(self,*args,**kwarg)\n        if 'Earth' in result:\n            return 'You are in home'\n        return result\n    return intern\n@add_repr\nclass Time:\n    def __init__(self,name) :",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "#Time",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "#Time = add_repr(Time)\n#Planeta = add_repr(Planeta)\nportugal = Time('Portugal')\nbrazil = Time('Brazil')\nearth = Planet('Earth')\nmars = Planet('Marte')\nprint(portugal)\nprint(mars)\nprint(earth.say_name())\nprint(mars.say_name())",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "#Planeta",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "#Planeta = add_repr(Planeta)\nportugal = Time('Portugal')\nbrazil = Time('Brazil')\nearth = Planet('Earth')\nmars = Planet('Marte')\nprint(portugal)\nprint(mars)\nprint(earth.say_name())\nprint(mars.say_name())",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "portugal",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "portugal = Time('Portugal')\nbrazil = Time('Brazil')\nearth = Planet('Earth')\nmars = Planet('Marte')\nprint(portugal)\nprint(mars)\nprint(earth.say_name())\nprint(mars.say_name())",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "brazil",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "brazil = Time('Brazil')\nearth = Planet('Earth')\nmars = Planet('Marte')\nprint(portugal)\nprint(mars)\nprint(earth.say_name())\nprint(mars.say_name())",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "earth",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "earth = Planet('Earth')\nmars = Planet('Marte')\nprint(portugal)\nprint(mars)\nprint(earth.say_name())\nprint(mars.say_name())",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "mars",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_methods",
        "description": "heranca.teoria_decorated_methods",
        "peekOfCode": "mars = Planet('Marte')\nprint(portugal)\nprint(mars)\nprint(earth.say_name())\nprint(mars.say_name())",
        "detail": "heranca.teoria_decorated_methods",
        "documentation": {}
    },
    {
        "label": "Time",
        "kind": 6,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "class Time:\n    def __init__(self,name) :\n        self.name = name\n@add_repr   \nclass Planet:\n    def __init__(self,name):\n        self.name = name\n#Time = add_repr(Time)\n#Planet = add_repr(Planet)\nportugal = Time('Portugal')",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "Planet",
        "kind": 6,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "class Planet:\n    def __init__(self,name):\n        self.name = name\n#Time = add_repr(Time)\n#Planet = add_repr(Planet)\nportugal = Time('Portugal')\nbrazil = Time('Brazil')\nterra = Planet('Terra')\nmarte = Planet('Marte')\nprint(portugal)",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "add_repr",
        "kind": 2,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "def add_repr(cls):\n    def my_repr(self):\n        class_name = self.__class__.__name__\n        class_dict =self.__dict__\n        class_repr = f'{class_name}({class_dict})'\n        return class_repr\n    cls.__repr__ = my_repr\n    return cls\n#class MyReprMixin:\n#    def __repr__(self):",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "#Time",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "#Time = add_repr(Time)\n#Planet = add_repr(Planet)\nportugal = Time('Portugal')\nbrazil = Time('Brazil')\nterra = Planet('Terra')\nmarte = Planet('Marte')\nprint(portugal)\nprint(marte)",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "#Planet",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "#Planet = add_repr(Planet)\nportugal = Time('Portugal')\nbrazil = Time('Brazil')\nterra = Planet('Terra')\nmarte = Planet('Marte')\nprint(portugal)\nprint(marte)",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "portugal",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "portugal = Time('Portugal')\nbrazil = Time('Brazil')\nterra = Planet('Terra')\nmarte = Planet('Marte')\nprint(portugal)\nprint(marte)",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "brazil",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "brazil = Time('Brazil')\nterra = Planet('Terra')\nmarte = Planet('Marte')\nprint(portugal)\nprint(marte)",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "terra",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "terra = Planet('Terra')\nmarte = Planet('Marte')\nprint(portugal)\nprint(marte)",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "marte",
        "kind": 5,
        "importPath": "heranca.teoria_decorated_with_class",
        "description": "heranca.teoria_decorated_with_class",
        "peekOfCode": "marte = Planet('Marte')\nprint(portugal)\nprint(marte)",
        "detail": "heranca.teoria_decorated_with_class",
        "documentation": {}
    },
    {
        "label": "MeuError",
        "kind": 6,
        "importPath": "heranca.teoria_exception",
        "description": "heranca.teoria_exception",
        "peekOfCode": "class MeuError(Exception):\n    ...\nclass OutroError(Exception):\n    ...\ndef levantar():\n    exception_ = MeuError('a', 'b', 'c')\n    exception_.add_note('Note 1')\n    exception_.add_note('Note 2')\n    raise exception_\ntry:",
        "detail": "heranca.teoria_exception",
        "documentation": {}
    },
    {
        "label": "OutroError",
        "kind": 6,
        "importPath": "heranca.teoria_exception",
        "description": "heranca.teoria_exception",
        "peekOfCode": "class OutroError(Exception):\n    ...\ndef levantar():\n    exception_ = MeuError('a', 'b', 'c')\n    exception_.add_note('Note 1')\n    exception_.add_note('Note 2')\n    raise exception_\ntry:\n    levantar()\nexcept (MeuError, ZeroDivisionError) as error:",
        "detail": "heranca.teoria_exception",
        "documentation": {}
    },
    {
        "label": "levantar",
        "kind": 2,
        "importPath": "heranca.teoria_exception",
        "description": "heranca.teoria_exception",
        "peekOfCode": "def levantar():\n    exception_ = MeuError('a', 'b', 'c')\n    exception_.add_note('Note 1')\n    exception_.add_note('Note 2')\n    raise exception_\ntry:\n    levantar()\nexcept (MeuError, ZeroDivisionError) as error:\n    print(error.__class__.__name__)\n    print(error.args)",
        "detail": "heranca.teoria_exception",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "heranca.teoria_heranca_multipla",
        "description": "heranca.teoria_heranca_multipla",
        "peekOfCode": "class A:\n    ...\n    def quem_sou(self):\n        print('A')\nclass B(A):\n    ...\n    # def quem_sou(self):\n    #     print('B')\nclass C(A):\n    ...",
        "detail": "heranca.teoria_heranca_multipla",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "heranca.teoria_heranca_multipla",
        "description": "heranca.teoria_heranca_multipla",
        "peekOfCode": "class B(A):\n    ...\n    # def quem_sou(self):\n    #     print('B')\nclass C(A):\n    ...\n    def quem_sou(self):\n        print('C')\nclass D(B, C):\n    ...",
        "detail": "heranca.teoria_heranca_multipla",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "heranca.teoria_heranca_multipla",
        "description": "heranca.teoria_heranca_multipla",
        "peekOfCode": "class C(A):\n    ...\n    def quem_sou(self):\n        print('C')\nclass D(B, C):\n    ...\n    def quem_sou(self):\n        print('D')\nd = D()\nd.quem_sou()",
        "detail": "heranca.teoria_heranca_multipla",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "heranca.teoria_heranca_multipla",
        "description": "heranca.teoria_heranca_multipla",
        "peekOfCode": "class D(B, C):\n    ...\n    def quem_sou(self):\n        print('D')\nd = D()\nd.quem_sou()\n# print(D.__mro__)\nprint(D.mro())",
        "detail": "heranca.teoria_heranca_multipla",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "heranca.teoria_heranca_multipla",
        "description": "heranca.teoria_heranca_multipla",
        "peekOfCode": "d = D()\nd.quem_sou()\n# print(D.__mro__)\nprint(D.mro())",
        "detail": "heranca.teoria_heranca_multipla",
        "documentation": {}
    },
    {
        "label": "Notificacao",
        "kind": 6,
        "importPath": "heranca.teoria_liskov",
        "description": "heranca.teoria_liskov",
        "peekOfCode": "class Notificacao(ABC):\n    def __init__(self, mensagem):\n        self.mensagem = mensagem\n    @abstractmethod\n    def enviar(self) -> bool: ...\nclass NotificacaoEmail(Notificacao):\n    def enviar(self) -> bool:\n        print('E-mail: enviando - ', self.mensagem)\n        return True\nclass NotificacaoSMS(Notificacao):",
        "detail": "heranca.teoria_liskov",
        "documentation": {}
    },
    {
        "label": "NotificacaoEmail",
        "kind": 6,
        "importPath": "heranca.teoria_liskov",
        "description": "heranca.teoria_liskov",
        "peekOfCode": "class NotificacaoEmail(Notificacao):\n    def enviar(self) -> bool:\n        print('E-mail: enviando - ', self.mensagem)\n        return True\nclass NotificacaoSMS(Notificacao):\n    def enviar(self) -> bool:\n        print('SMS: enviando - ', self.mensagem)\n        return False\ndef notificar(notificacao: Notificacao):\n    notificacao_enviada = notificacao.enviar()",
        "detail": "heranca.teoria_liskov",
        "documentation": {}
    },
    {
        "label": "NotificacaoSMS",
        "kind": 6,
        "importPath": "heranca.teoria_liskov",
        "description": "heranca.teoria_liskov",
        "peekOfCode": "class NotificacaoSMS(Notificacao):\n    def enviar(self) -> bool:\n        print('SMS: enviando - ', self.mensagem)\n        return False\ndef notificar(notificacao: Notificacao):\n    notificacao_enviada = notificacao.enviar()\n    if notificacao_enviada:\n        print('Notificação enviada')\n    else:\n        print('Notificação NÃO enviada')",
        "detail": "heranca.teoria_liskov",
        "documentation": {}
    },
    {
        "label": "notificar",
        "kind": 2,
        "importPath": "heranca.teoria_liskov",
        "description": "heranca.teoria_liskov",
        "peekOfCode": "def notificar(notificacao: Notificacao):\n    notificacao_enviada = notificacao.enviar()\n    if notificacao_enviada:\n        print('Notificação enviada')\n    else:\n        print('Notificação NÃO enviada')\nnotificacao_email = NotificacaoEmail('testando e-mail')\nnotificar(notificacao_email)\nnotificacao_sms = NotificacaoSMS('testando SMS')\nnotificar(notificacao_sms)",
        "detail": "heranca.teoria_liskov",
        "documentation": {}
    },
    {
        "label": "notificacao_email",
        "kind": 5,
        "importPath": "heranca.teoria_liskov",
        "description": "heranca.teoria_liskov",
        "peekOfCode": "notificacao_email = NotificacaoEmail('testando e-mail')\nnotificar(notificacao_email)\nnotificacao_sms = NotificacaoSMS('testando SMS')\nnotificar(notificacao_sms)",
        "detail": "heranca.teoria_liskov",
        "documentation": {}
    },
    {
        "label": "notificacao_sms",
        "kind": 5,
        "importPath": "heranca.teoria_liskov",
        "description": "heranca.teoria_liskov",
        "peekOfCode": "notificacao_sms = NotificacaoSMS('testando SMS')\nnotificar(notificacao_sms)",
        "detail": "heranca.teoria_liskov",
        "documentation": {}
    },
    {
        "label": "Ponto",
        "kind": 6,
        "importPath": "heranca.teoria_magic_methods",
        "description": "heranca.teoria_magic_methods",
        "peekOfCode": "class Ponto:\n    def __init__(self, x, y, z='String'):\n        self.x = x\n        self.y = y\n        self.z = z\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n    def __repr__(self):\n        # class_name = self.__class__.__name__\n        class_name = type(self).__name__",
        "detail": "heranca.teoria_magic_methods",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "heranca.teoria_magic_methods",
        "description": "heranca.teoria_magic_methods",
        "peekOfCode": "p1 = Ponto(1, 2)\np2 = Ponto(978, 876)\nprint(p1)\nprint(repr(p2))\nprint(f'{p2!r}')",
        "detail": "heranca.teoria_magic_methods",
        "documentation": {}
    },
    {
        "label": "p2",
        "kind": 5,
        "importPath": "heranca.teoria_magic_methods",
        "description": "heranca.teoria_magic_methods",
        "peekOfCode": "p2 = Ponto(978, 876)\nprint(p1)\nprint(repr(p2))\nprint(f'{p2!r}')",
        "detail": "heranca.teoria_magic_methods",
        "documentation": {}
    },
    {
        "label": "Ponto",
        "kind": 6,
        "importPath": "heranca.teoria_magic_methods2",
        "description": "heranca.teoria_magic_methods2",
        "peekOfCode": "class Ponto:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        class_name = type(self).__name__\n        return f'{class_name}(x={self.x!r}, y={self.y!r})'\n    def __add__(self, other):\n        novo_x = self.x + other.x\n        novo_y = self.y + other.y",
        "detail": "heranca.teoria_magic_methods2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 5,
        "importPath": "heranca.teoria_metaclass",
        "description": "heranca.teoria_metaclass",
        "peekOfCode": "Foo = type('Foo', (object,), {})\nf = Foo()\n# print(isinstance(f, Foo))\nprint(type(f))\nprint(type(Foo))",
        "detail": "heranca.teoria_metaclass",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "heranca.teoria_metaclass",
        "description": "heranca.teoria_metaclass",
        "peekOfCode": "f = Foo()\n# print(isinstance(f, Foo))\nprint(type(f))\nprint(type(Foo))",
        "detail": "heranca.teoria_metaclass",
        "documentation": {}
    },
    {
        "label": "Meta",
        "kind": 6,
        "importPath": "heranca.teoria_metaclass_new_call",
        "description": "heranca.teoria_metaclass_new_call",
        "peekOfCode": "class Meta(type):\n    def __new__(mcs, name, bases, dct):\n        print('METACLASS NEW')\n        cls = super().__new__(mcs, name, bases, dct)\n        cls.attr = 1234\n        cls.__repr__ = meu_repr\n        if 'falar' not in cls.__dict__ or \\\n                not callable(cls.__dict__['falar']):\n            raise NotImplementedError('Implemente falar')\n        return cls",
        "detail": "heranca.teoria_metaclass_new_call",
        "documentation": {}
    },
    {
        "label": "Pessoa",
        "kind": 6,
        "importPath": "heranca.teoria_metaclass_new_call",
        "description": "heranca.teoria_metaclass_new_call",
        "peekOfCode": "class Pessoa(metaclass=Meta):\n    # falar = 123\n    def __new__(cls, *args, **kwargs):\n        print('MEU NEW')\n        instancia = super().__new__(cls)\n        return instancia\n    def __init__(self, nome):\n        print('MEU INIT')\n        # self.nome = nome\n    def falar(self):",
        "detail": "heranca.teoria_metaclass_new_call",
        "documentation": {}
    },
    {
        "label": "meu_repr",
        "kind": 2,
        "importPath": "heranca.teoria_metaclass_new_call",
        "description": "heranca.teoria_metaclass_new_call",
        "peekOfCode": "def meu_repr(self):\n    return f'{type(self).__name__}({self.__dict__})'\nclass Meta(type):\n    def __new__(mcs, name, bases, dct):\n        print('METACLASS NEW')\n        cls = super().__new__(mcs, name, bases, dct)\n        cls.attr = 1234\n        cls.__repr__ = meu_repr\n        if 'falar' not in cls.__dict__ or \\\n                not callable(cls.__dict__['falar']):",
        "detail": "heranca.teoria_metaclass_new_call",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "heranca.teoria_metaclass_new_call",
        "description": "heranca.teoria_metaclass_new_call",
        "peekOfCode": "p1 = Pessoa('Luiz')\np1.falar()",
        "detail": "heranca.teoria_metaclass_new_call",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "heranca.teoria_new_init",
        "description": "heranca.teoria_new_init",
        "peekOfCode": "class A:\n    def __new__(cls, *args, **kwargs):\n        instancia = super().__new__(cls)\n        print('sou o new')\n        return instancia\n    def __init__(self, x):\n        self.x = x\n        print('Sou o init')\n    def __repr__(self):\n        return 'A()'",
        "detail": "heranca.teoria_new_init",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "heranca.teoria_new_init",
        "description": "heranca.teoria_new_init",
        "peekOfCode": "a = A(123)\nprint(a.x)",
        "detail": "heranca.teoria_new_init",
        "documentation": {}
    },
    {
        "label": "CAMINHO_HTML",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "CAMINHO_HTML = pathlib.Path(__file__).parent / 'confsEmail.html'\n# Dados do remetente e destinatário\nremetente = os.getenv('FROM_EMAIL', '')\ndestinatario = remetente\n# Configurações SMTP\nsmtp_server = 'smtp.gmail.com'\nsmtp_port = 587\nsmtp_username = os.getenv('FROM_EMAIL', '')\nsmtp_password = os.getenv('EMAIL_PASSWORD', '')\n# Mensagem de texto",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "remetente",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "remetente = os.getenv('FROM_EMAIL', '')\ndestinatario = remetente\n# Configurações SMTP\nsmtp_server = 'smtp.gmail.com'\nsmtp_port = 587\nsmtp_username = os.getenv('FROM_EMAIL', '')\nsmtp_password = os.getenv('EMAIL_PASSWORD', '')\n# Mensagem de texto\nwith open(CAMINHO_HTML, 'r') as arquivo:\n    texto_arquivo = arquivo.read()",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "destinatario",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "destinatario = remetente\n# Configurações SMTP\nsmtp_server = 'smtp.gmail.com'\nsmtp_port = 587\nsmtp_username = os.getenv('FROM_EMAIL', '')\nsmtp_password = os.getenv('EMAIL_PASSWORD', '')\n# Mensagem de texto\nwith open(CAMINHO_HTML, 'r') as arquivo:\n    texto_arquivo = arquivo.read()\n    template = Template(texto_arquivo)",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "smtp_server",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "smtp_server = 'smtp.gmail.com'\nsmtp_port = 587\nsmtp_username = os.getenv('FROM_EMAIL', '')\nsmtp_password = os.getenv('EMAIL_PASSWORD', '')\n# Mensagem de texto\nwith open(CAMINHO_HTML, 'r') as arquivo:\n    texto_arquivo = arquivo.read()\n    template = Template(texto_arquivo)\n    texto_email = template.substitute(nome='Helena')\n# Transformar nossa mensagem em MIMEMultipart",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "smtp_port",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "smtp_port = 587\nsmtp_username = os.getenv('FROM_EMAIL', '')\nsmtp_password = os.getenv('EMAIL_PASSWORD', '')\n# Mensagem de texto\nwith open(CAMINHO_HTML, 'r') as arquivo:\n    texto_arquivo = arquivo.read()\n    template = Template(texto_arquivo)\n    texto_email = template.substitute(nome='Helena')\n# Transformar nossa mensagem em MIMEMultipart\nmime_multipart = MIMEMultipart()",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "smtp_username",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "smtp_username = os.getenv('FROM_EMAIL', '')\nsmtp_password = os.getenv('EMAIL_PASSWORD', '')\n# Mensagem de texto\nwith open(CAMINHO_HTML, 'r') as arquivo:\n    texto_arquivo = arquivo.read()\n    template = Template(texto_arquivo)\n    texto_email = template.substitute(nome='Helena')\n# Transformar nossa mensagem em MIMEMultipart\nmime_multipart = MIMEMultipart()\nmime_multipart['from'] = remetente",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "smtp_password",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "smtp_password = os.getenv('EMAIL_PASSWORD', '')\n# Mensagem de texto\nwith open(CAMINHO_HTML, 'r') as arquivo:\n    texto_arquivo = arquivo.read()\n    template = Template(texto_arquivo)\n    texto_email = template.substitute(nome='Helena')\n# Transformar nossa mensagem em MIMEMultipart\nmime_multipart = MIMEMultipart()\nmime_multipart['from'] = remetente\nmime_multipart['to'] = destinatario",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "mime_multipart",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "mime_multipart = MIMEMultipart()\nmime_multipart['from'] = remetente\nmime_multipart['to'] = destinatario\nmime_multipart['subject'] = 'Este é o assunto do e-mail'\ncorpo_email = MIMEText(texto_email, 'html', 'utf-8')\nmime_multipart.attach(corpo_email)\n# Envia o e-mail\nwith smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.ehlo()\n    server.starttls()",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "mime_multipart['from']",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "mime_multipart['from'] = remetente\nmime_multipart['to'] = destinatario\nmime_multipart['subject'] = 'Este é o assunto do e-mail'\ncorpo_email = MIMEText(texto_email, 'html', 'utf-8')\nmime_multipart.attach(corpo_email)\n# Envia o e-mail\nwith smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.ehlo()\n    server.starttls()\n    server.login(smtp_username, smtp_password)",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "mime_multipart['to']",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "mime_multipart['to'] = destinatario\nmime_multipart['subject'] = 'Este é o assunto do e-mail'\ncorpo_email = MIMEText(texto_email, 'html', 'utf-8')\nmime_multipart.attach(corpo_email)\n# Envia o e-mail\nwith smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.ehlo()\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.send_message(mime_multipart)",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "mime_multipart['subject']",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "mime_multipart['subject'] = 'Este é o assunto do e-mail'\ncorpo_email = MIMEText(texto_email, 'html', 'utf-8')\nmime_multipart.attach(corpo_email)\n# Envia o e-mail\nwith smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.ehlo()\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.send_message(mime_multipart)\n    print('E-mail enviado com  sucesso!')",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "corpo_email",
        "kind": 5,
        "importPath": "modulosDePython.ComoEnviarEmail",
        "description": "modulosDePython.ComoEnviarEmail",
        "peekOfCode": "corpo_email = MIMEText(texto_email, 'html', 'utf-8')\nmime_multipart.attach(corpo_email)\n# Envia o e-mail\nwith smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.ehlo()\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.send_message(mime_multipart)\n    print('E-mail enviado com  sucesso!')",
        "detail": "modulosDePython.ComoEnviarEmail",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 5,
        "importPath": "modulosDePython.exemplo_subprocess",
        "description": "modulosDePython.exemplo_subprocess",
        "peekOfCode": "cmd = ['ls -lah /']\nencoding = 'utf_8'\nsystem = sys.platform\nif system == \"win32\":\n    print(system)\n    cmd = ['ping', '127.0.0.1']\n    encoding = 'cp850'\nproc = subprocess.run(\n    cmd, capture_output=True,\n    text=True, encoding=encoding,",
        "detail": "modulosDePython.exemplo_subprocess",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 5,
        "importPath": "modulosDePython.exemplo_subprocess",
        "description": "modulosDePython.exemplo_subprocess",
        "peekOfCode": "encoding = 'utf_8'\nsystem = sys.platform\nif system == \"win32\":\n    print(system)\n    cmd = ['ping', '127.0.0.1']\n    encoding = 'cp850'\nproc = subprocess.run(\n    cmd, capture_output=True,\n    text=True, encoding=encoding,\n    shell=True,",
        "detail": "modulosDePython.exemplo_subprocess",
        "documentation": {}
    },
    {
        "label": "system",
        "kind": 5,
        "importPath": "modulosDePython.exemplo_subprocess",
        "description": "modulosDePython.exemplo_subprocess",
        "peekOfCode": "system = sys.platform\nif system == \"win32\":\n    print(system)\n    cmd = ['ping', '127.0.0.1']\n    encoding = 'cp850'\nproc = subprocess.run(\n    cmd, capture_output=True,\n    text=True, encoding=encoding,\n    shell=True,\n)",
        "detail": "modulosDePython.exemplo_subprocess",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "modulosDePython.exemplo_subprocess",
        "description": "modulosDePython.exemplo_subprocess",
        "peekOfCode": "proc = subprocess.run(\n    cmd, capture_output=True,\n    text=True, encoding=encoding,\n    shell=True,\n)\nprint()\n# print(proc.args)\n# print(proc.stderr)\nprint(proc.stdout)\n# print(proc.returncode)",
        "detail": "modulosDePython.exemplo_subprocess",
        "documentation": {}
    },
    {
        "label": "total_value",
        "kind": 5,
        "importPath": "modulosDePython.exercisio_datatime",
        "description": "modulosDePython.exercisio_datatime",
        "peekOfCode": "total_value = 1_000_000\ndate_loan = datetime(2020,12,20)\ndelta_years = relativedelta(years=5)\nfinal_date = date_loan + delta_years\ndate_instalments = []\ndate_instalment = date_loan\nwhile date_instalment < final_date:\n    date_instalments.append(date_instalment)\n    date_instalment += relativedelta(months=+1)\nvalue_instalments = total_value / len(date_instalments) ",
        "detail": "modulosDePython.exercisio_datatime",
        "documentation": {}
    },
    {
        "label": "date_loan",
        "kind": 5,
        "importPath": "modulosDePython.exercisio_datatime",
        "description": "modulosDePython.exercisio_datatime",
        "peekOfCode": "date_loan = datetime(2020,12,20)\ndelta_years = relativedelta(years=5)\nfinal_date = date_loan + delta_years\ndate_instalments = []\ndate_instalment = date_loan\nwhile date_instalment < final_date:\n    date_instalments.append(date_instalment)\n    date_instalment += relativedelta(months=+1)\nvalue_instalments = total_value / len(date_instalments) \nfor date in date_instalments:",
        "detail": "modulosDePython.exercisio_datatime",
        "documentation": {}
    },
    {
        "label": "delta_years",
        "kind": 5,
        "importPath": "modulosDePython.exercisio_datatime",
        "description": "modulosDePython.exercisio_datatime",
        "peekOfCode": "delta_years = relativedelta(years=5)\nfinal_date = date_loan + delta_years\ndate_instalments = []\ndate_instalment = date_loan\nwhile date_instalment < final_date:\n    date_instalments.append(date_instalment)\n    date_instalment += relativedelta(months=+1)\nvalue_instalments = total_value / len(date_instalments) \nfor date in date_instalments:\n    print(date.strftime('%d/%m/%Y'),f'E${value_instalments:,.2f}')",
        "detail": "modulosDePython.exercisio_datatime",
        "documentation": {}
    },
    {
        "label": "final_date",
        "kind": 5,
        "importPath": "modulosDePython.exercisio_datatime",
        "description": "modulosDePython.exercisio_datatime",
        "peekOfCode": "final_date = date_loan + delta_years\ndate_instalments = []\ndate_instalment = date_loan\nwhile date_instalment < final_date:\n    date_instalments.append(date_instalment)\n    date_instalment += relativedelta(months=+1)\nvalue_instalments = total_value / len(date_instalments) \nfor date in date_instalments:\n    print(date.strftime('%d/%m/%Y'),f'E${value_instalments:,.2f}')\nprint('----------------------------------------------------')",
        "detail": "modulosDePython.exercisio_datatime",
        "documentation": {}
    },
    {
        "label": "date_instalments",
        "kind": 5,
        "importPath": "modulosDePython.exercisio_datatime",
        "description": "modulosDePython.exercisio_datatime",
        "peekOfCode": "date_instalments = []\ndate_instalment = date_loan\nwhile date_instalment < final_date:\n    date_instalments.append(date_instalment)\n    date_instalment += relativedelta(months=+1)\nvalue_instalments = total_value / len(date_instalments) \nfor date in date_instalments:\n    print(date.strftime('%d/%m/%Y'),f'E${value_instalments:,.2f}')\nprint('----------------------------------------------------')\nprint(",
        "detail": "modulosDePython.exercisio_datatime",
        "documentation": {}
    },
    {
        "label": "date_instalment",
        "kind": 5,
        "importPath": "modulosDePython.exercisio_datatime",
        "description": "modulosDePython.exercisio_datatime",
        "peekOfCode": "date_instalment = date_loan\nwhile date_instalment < final_date:\n    date_instalments.append(date_instalment)\n    date_instalment += relativedelta(months=+1)\nvalue_instalments = total_value / len(date_instalments) \nfor date in date_instalments:\n    print(date.strftime('%d/%m/%Y'),f'E${value_instalments:,.2f}')\nprint('----------------------------------------------------')\nprint(\n    f'The loan was {total_value} to pay'",
        "detail": "modulosDePython.exercisio_datatime",
        "documentation": {}
    },
    {
        "label": "value_instalments",
        "kind": 5,
        "importPath": "modulosDePython.exercisio_datatime",
        "description": "modulosDePython.exercisio_datatime",
        "peekOfCode": "value_instalments = total_value / len(date_instalments) \nfor date in date_instalments:\n    print(date.strftime('%d/%m/%Y'),f'E${value_instalments:,.2f}')\nprint('----------------------------------------------------')\nprint(\n    f'The loan was {total_value} to pay'\n    f' in {delta_years.year} years'\n    f'({len(date_instalments)} months) in instalments of {value_instalments:,.2f} E$)'\n)",
        "detail": "modulosDePython.exercisio_datatime",
        "documentation": {}
    },
    {
        "label": "CAMINHO_CSV",
        "kind": 5,
        "importPath": "modulosDePython.teoria_csv_witer",
        "description": "modulosDePython.teoria_csv_witer",
        "peekOfCode": "CAMINHO_CSV = Path(__file__).parent / 'write.csv'\nlista_clientes = [\n    {'Nome': 'Luiz Otávio', 'Endereço': 'Av 1, 22'},\n    {'Nome': 'João Silva', 'Endereço': 'R. 2, \"1\"'},\n    {'Nome': 'Maria Sol', 'Endereço': 'Av B, 3A'},\n]\nwith open(CAMINHO_CSV, 'w') as arquivo:\n    nome_colunas = lista_clientes[0].keys()\n    escritor = csv.DictWriter(\n        arquivo,",
        "detail": "modulosDePython.teoria_csv_witer",
        "documentation": {}
    },
    {
        "label": "lista_clientes",
        "kind": 5,
        "importPath": "modulosDePython.teoria_csv_witer",
        "description": "modulosDePython.teoria_csv_witer",
        "peekOfCode": "lista_clientes = [\n    {'Nome': 'Luiz Otávio', 'Endereço': 'Av 1, 22'},\n    {'Nome': 'João Silva', 'Endereço': 'R. 2, \"1\"'},\n    {'Nome': 'Maria Sol', 'Endereço': 'Av B, 3A'},\n]\nwith open(CAMINHO_CSV, 'w') as arquivo:\n    nome_colunas = lista_clientes[0].keys()\n    escritor = csv.DictWriter(\n        arquivo,\n        fieldnames=nome_colunas",
        "detail": "modulosDePython.teoria_csv_witer",
        "documentation": {}
    },
    {
        "label": "CAMINHO_CSV",
        "kind": 5,
        "importPath": "modulosDePython.teoria_cvs_reader",
        "description": "modulosDePython.teoria_cvs_reader",
        "peekOfCode": "CAMINHO_CSV = Path(__file__).parent / 'wread.csv'\nwith open(CAMINHO_CSV, 'r') as arquivo:\n    leitor = csv.DictReader(arquivo)\n    for linha in leitor:\n        print(linha['Nome'], linha['Idade'], linha['Endereço'])\n# with open(CAMINHO_CSV, 'r') as arquivo:\n#     leitor = csv.reader(arquivo)\n#     for linha in leitor:\n#         print(linha)",
        "detail": "modulosDePython.teoria_cvs_reader",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "modulosDePython.teoria_datatime_strftime",
        "description": "modulosDePython.teoria_datatime_strftime",
        "peekOfCode": "data = datetime.strptime('2022-12-13 07:59:23', '%Y-%m-%d %H:%M:%S')\nprint(data.strftime('%d/%m/%Y'))\nprint(data.strftime('%d/%m/%Y %H:%M'))\nprint(data.strftime('%d/%m/%Y %H:%M:%S'))\nprint(data.strftime('%Y'), data.year)\nprint(data.strftime('%d'), data.day)\nprint(data.strftime('%m'), data.month)\nprint(data.strftime('%H'), data.hour)\nprint(data.strftime('%M'), data.minute)\nprint(data.strftime('%S'), data.second)",
        "detail": "modulosDePython.teoria_datatime_strftime",
        "documentation": {}
    },
    {
        "label": "data_str_data",
        "kind": 5,
        "importPath": "modulosDePython.teoria_dateTime",
        "description": "modulosDePython.teoria_dateTime",
        "peekOfCode": "data_str_data = '2022/04/20 07:49:23'\ndata_str_data = '20/04/2022'\ndata_str_fmt = '%d/%m/%Y'\n# from pytz import timezone\n# data = datetime(2022, 4, 20, 7, 49, 23)\ndata = datetime.strptime(data_str_data, data_str_fmt)\nprint(data)\ndata = datetime.now()\nprint(data.timestamp())  # Isso está na base de dados\nprint(datetime.fromtimestamp(1670849077))",
        "detail": "modulosDePython.teoria_dateTime",
        "documentation": {}
    },
    {
        "label": "data_str_data",
        "kind": 5,
        "importPath": "modulosDePython.teoria_dateTime",
        "description": "modulosDePython.teoria_dateTime",
        "peekOfCode": "data_str_data = '20/04/2022'\ndata_str_fmt = '%d/%m/%Y'\n# from pytz import timezone\n# data = datetime(2022, 4, 20, 7, 49, 23)\ndata = datetime.strptime(data_str_data, data_str_fmt)\nprint(data)\ndata = datetime.now()\nprint(data.timestamp())  # Isso está na base de dados\nprint(datetime.fromtimestamp(1670849077))\n# data_str_data = '2022/04/20 07:49:23'",
        "detail": "modulosDePython.teoria_dateTime",
        "documentation": {}
    },
    {
        "label": "data_str_fmt",
        "kind": 5,
        "importPath": "modulosDePython.teoria_dateTime",
        "description": "modulosDePython.teoria_dateTime",
        "peekOfCode": "data_str_fmt = '%d/%m/%Y'\n# from pytz import timezone\n# data = datetime(2022, 4, 20, 7, 49, 23)\ndata = datetime.strptime(data_str_data, data_str_fmt)\nprint(data)\ndata = datetime.now()\nprint(data.timestamp())  # Isso está na base de dados\nprint(datetime.fromtimestamp(1670849077))\n# data_str_data = '2022/04/20 07:49:23'\n# data_str_data = '20/04/2022'",
        "detail": "modulosDePython.teoria_dateTime",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "modulosDePython.teoria_dateTime",
        "description": "modulosDePython.teoria_dateTime",
        "peekOfCode": "data = datetime.strptime(data_str_data, data_str_fmt)\nprint(data)\ndata = datetime.now()\nprint(data.timestamp())  # Isso está na base de dados\nprint(datetime.fromtimestamp(1670849077))\n# data_str_data = '2022/04/20 07:49:23'\n# data_str_data = '20/04/2022'\n# data_str_fmt = '%d/%m/%Y'\n# data = datetime(2022, 4, 20, 7, 49, 23, tzinfo=timezone('Asia/Tokyo'))\n# data = datetime.strptime(data_str_data, data_str_fmt)",
        "detail": "modulosDePython.teoria_dateTime",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "modulosDePython.teoria_dateTime",
        "description": "modulosDePython.teoria_dateTime",
        "peekOfCode": "data = datetime.now()\nprint(data.timestamp())  # Isso está na base de dados\nprint(datetime.fromtimestamp(1670849077))\n# data_str_data = '2022/04/20 07:49:23'\n# data_str_data = '20/04/2022'\n# data_str_fmt = '%d/%m/%Y'\n# data = datetime(2022, 4, 20, 7, 49, 23, tzinfo=timezone('Asia/Tokyo'))\n# data = datetime.strptime(data_str_data, data_str_fmt)",
        "detail": "modulosDePython.teoria_dateTime",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "description": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "peekOfCode": "fmt = '%d/%m/%Y %H:%M:%S'\ndata_inicio = datetime.strptime('20/04/1987 09:30:30', fmt)\ndata_fim = datetime.strptime('12/12/2022 08:20:20', fmt)\n# delta = timedelta(days=10, hours=2)\ndelta = relativedelta(data_fim, data_inicio)\nprint(delta.days, delta.years)\nprint(data_fim - delta)\n# print(data_fim)\nprint(data_fim + relativedelta(seconds=60, minutes=10))\n# delta = data_fim - data_inicio",
        "detail": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "documentation": {}
    },
    {
        "label": "data_inicio",
        "kind": 5,
        "importPath": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "description": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "peekOfCode": "data_inicio = datetime.strptime('20/04/1987 09:30:30', fmt)\ndata_fim = datetime.strptime('12/12/2022 08:20:20', fmt)\n# delta = timedelta(days=10, hours=2)\ndelta = relativedelta(data_fim, data_inicio)\nprint(delta.days, delta.years)\nprint(data_fim - delta)\n# print(data_fim)\nprint(data_fim + relativedelta(seconds=60, minutes=10))\n# delta = data_fim - data_inicio\n# print(delta.days, delta.seconds, delta.microseconds)",
        "detail": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "documentation": {}
    },
    {
        "label": "data_fim",
        "kind": 5,
        "importPath": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "description": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "peekOfCode": "data_fim = datetime.strptime('12/12/2022 08:20:20', fmt)\n# delta = timedelta(days=10, hours=2)\ndelta = relativedelta(data_fim, data_inicio)\nprint(delta.days, delta.years)\nprint(data_fim - delta)\n# print(data_fim)\nprint(data_fim + relativedelta(seconds=60, minutes=10))\n# delta = data_fim - data_inicio\n# print(delta.days, delta.seconds, delta.microseconds)\n# print(delta.total_seconds())",
        "detail": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 5,
        "importPath": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "description": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "peekOfCode": "delta = relativedelta(data_fim, data_inicio)\nprint(delta.days, delta.years)\nprint(data_fim - delta)\n# print(data_fim)\nprint(data_fim + relativedelta(seconds=60, minutes=10))\n# delta = data_fim - data_inicio\n# print(delta.days, delta.seconds, delta.microseconds)\n# print(delta.total_seconds())\n# print(data_fim > data_inicio)\n# print(data_fim < data_inicio)",
        "detail": "modulosDePython.teoria_datetime_timedelta_dateutil",
        "documentation": {}
    },
    {
        "label": "NOME_ARQUIVO",
        "kind": 5,
        "importPath": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "description": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "peekOfCode": "NOME_ARQUIVO = 'file.json'\nCAMINHO_ABSOLUTO_ARQUIVO = os.path.abspath(\n    os.path.join(\n        os.path.dirname(__file__),\n        NOME_ARQUIVO\n    )\n)\nfilme = {\n    'title': 'O Senhor dos Anéis: A Sociedade do Anel',\n    'original_title': 'The Lord of the Rings: The Fellowship of the Ring',",
        "detail": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "documentation": {}
    },
    {
        "label": "CAMINHO_ABSOLUTO_ARQUIVO",
        "kind": 5,
        "importPath": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "description": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "peekOfCode": "CAMINHO_ABSOLUTO_ARQUIVO = os.path.abspath(\n    os.path.join(\n        os.path.dirname(__file__),\n        NOME_ARQUIVO\n    )\n)\nfilme = {\n    'title': 'O Senhor dos Anéis: A Sociedade do Anel',\n    'original_title': 'The Lord of the Rings: The Fellowship of the Ring',\n    'is_movie': True,",
        "detail": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "documentation": {}
    },
    {
        "label": "filme",
        "kind": 5,
        "importPath": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "description": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "peekOfCode": "filme = {\n    'title': 'O Senhor dos Anéis: A Sociedade do Anel',\n    'original_title': 'The Lord of the Rings: The Fellowship of the Ring',\n    'is_movie': True,\n    'imdb_rating': 8.8,\n    'year': 2001,\n    'characters': ['Frodo', 'Sam', 'Gandalf', 'Legolas', 'Boromir'],\n    'budget': None\n}\nwith open(CAMINHO_ABSOLUTO_ARQUIVO, 'w') as arquivo:",
        "detail": "modulosDePython.teoria_json_dumpsLoads_arquivos",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "modulosDePython.teoria_json_dumps_loads_typing",
        "description": "modulosDePython.teoria_json_dumps_loads_typing",
        "peekOfCode": "class Movie(TypedDict):\n    title: str\n    original_title: str\n    is_movie: bool\n    imdb_rating: float\n    year: int\n    characters: list[str]\n    budget: None | float\nstring_json = '''\n{",
        "detail": "modulosDePython.teoria_json_dumps_loads_typing",
        "documentation": {}
    },
    {
        "label": "string_json",
        "kind": 5,
        "importPath": "modulosDePython.teoria_json_dumps_loads_typing",
        "description": "modulosDePython.teoria_json_dumps_loads_typing",
        "peekOfCode": "string_json = '''\n{\n  \"title\": \"O Senhor dos Anéis: A Sociedade do Anel\",\n  \"original_title\": \"The Lord of the Rings: The Fellowship of the Ring\",\n  \"is_movie\": true,\n  \"imdb_rating\": 8.8,\n  \"year\": 2001,\n  \"characters\": [\"Frodo\", \"Sam\", \"Gandalf\", \"Legolas\", \"Boromir\"],\n  \"budget\": null\n}",
        "detail": "modulosDePython.teoria_json_dumps_loads_typing",
        "documentation": {}
    },
    {
        "label": "json_string",
        "kind": 5,
        "importPath": "modulosDePython.teoria_json_dumps_loads_typing",
        "description": "modulosDePython.teoria_json_dumps_loads_typing",
        "peekOfCode": "json_string = json.dumps(filme, ensure_ascii=False, indent=2)\nprint(json_string)",
        "detail": "modulosDePython.teoria_json_dumps_loads_typing",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "modulosDePython.teoria_lifo_fifo",
        "description": "modulosDePython.teoria_lifo_fifo",
        "peekOfCode": "lista = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# ✅ Legal (LIFO com lista)\n#  0  1  2  3  4  5  6  7  8  9\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlista.append(10)\n#  0  1  2  3  4  5  6  7  8  9  10\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlista.append(11)\n#  0  1  2  3  4  5  6  7  8  9  10, 11\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "detail": "modulosDePython.teoria_lifo_fifo",
        "documentation": {}
    },
    {
        "label": "ultimo_removido",
        "kind": 5,
        "importPath": "modulosDePython.teoria_lifo_fifo",
        "description": "modulosDePython.teoria_lifo_fifo",
        "peekOfCode": "ultimo_removido = lista.pop()\n#  0  1  2  3  4  5  6  7  8  9  10\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Último: ', ultimo_removido)\nprint('Lista:', lista)\n#  0  1  2  3  4  5  6  7  8  9  10\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint()\nlista = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# 🚫 Ruim (FIFO com lista)",
        "detail": "modulosDePython.teoria_lifo_fifo",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "modulosDePython.teoria_lifo_fifo",
        "description": "modulosDePython.teoria_lifo_fifo",
        "peekOfCode": "lista = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# 🚫 Ruim (FIFO com lista)\n#  0  1  2  3  4  5  6  7  8  9\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlista.insert(0, 10)\n#   0  1  2  3  4  5  6  7  8  9, 10\n# [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlista.insert(0, 11)\n#  0   1   2  3  4  5  6  7  8  9, 10 11\n# [11, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "detail": "modulosDePython.teoria_lifo_fifo",
        "documentation": {}
    },
    {
        "label": "primeiro_removido",
        "kind": 5,
        "importPath": "modulosDePython.teoria_lifo_fifo",
        "description": "modulosDePython.teoria_lifo_fifo",
        "peekOfCode": "primeiro_removido = lista.pop(0)  # 11\n#  0   1  2  3  4  5  6  7  8  9, 10\n# [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint('Primeiro: ', primeiro_removido)  # 11\nprint('Lista:', lista)  # [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint()\n# FIFO (First In First Out)\n# Filas (queue)\n# Significa que o primeiro item a entrar será o primeiro a sair (deque)\n# Artigo:",
        "detail": "modulosDePython.teoria_lifo_fifo",
        "documentation": {}
    },
    {
        "label": "caminho",
        "kind": 5,
        "importPath": "modulosDePython.teoria_listdir",
        "description": "modulosDePython.teoria_listdir",
        "peekOfCode": "caminho = os.path.join('/Users', 'Diogo', 'Desktop', 'EXEMPLO')\nfor pasta in os.listdir(caminho):\n    caminho_completo_pasta = os.path.join(caminho, pasta)\n    print(pasta)\n    if not os.path.isdir(caminho_completo_pasta):\n        continue\n    for imagem in os.listdir(caminho_completo_pasta):\n        print('  ', imagem)",
        "detail": "modulosDePython.teoria_listdir",
        "documentation": {}
    },
    {
        "label": "caminho",
        "kind": 5,
        "importPath": "modulosDePython.teoria_ospath",
        "description": "modulosDePython.teoria_ospath",
        "peekOfCode": "caminho = os.path.join('Desktop', 'curso', 'arquivo.txt')\n# print(caminho)\ndiretorio, arquivo = os.path.split(caminho)\nnome_arquivo, extensao_arquivo = os.path.splitext(arquivo)\n# print(nome_arquivo, extensao_arquivo)\n# print(os.path.exists('/Users/luizotavio/Desktop/curso-python-rep'))\n# print(os.path.abspath('.'))\nprint(caminho)\nprint(os.path.basename(caminho))\nprint(os.path.basename(diretorio))",
        "detail": "modulosDePython.teoria_ospath",
        "documentation": {}
    },
    {
        "label": "formata_tamanho",
        "kind": 2,
        "importPath": "modulosDePython.teoria_ospath_getsize_osstat",
        "description": "modulosDePython.teoria_ospath_getsize_osstat",
        "peekOfCode": "def formata_tamanho(tamanho_em_bytes: int, base: int = 1000) -> str:\n    \"\"\"Formata um tamanho, de bytes para o tamanho apropriado\"\"\"\n    # Original:\n    # https://stackoverflow.com/questions/5194057/better-way-to-convert-file-sizes-in-python\n    # Se o tamanho for menor ou igual a 0, 0B.\n    if tamanho_em_bytes <= 0:\n        return \"0B\"\n    # Tupla com os tamanhos\n    #                      0    1     2     3     4     5\n    abreviacao_tamanhos = \"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"",
        "detail": "modulosDePython.teoria_ospath_getsize_osstat",
        "documentation": {}
    },
    {
        "label": "caminho",
        "kind": 5,
        "importPath": "modulosDePython.teoria_ospath_getsize_osstat",
        "description": "modulosDePython.teoria_ospath_getsize_osstat",
        "peekOfCode": "caminho = os.path.join('/Users', 'Diogo', 'Desktop', 'EXEMPLO')\ncounter = count()\nfor root, dirs, files in os.walk(caminho):\n    the_counter = next(counter)\n    print(the_counter, 'Pasta atual', root)\n    for dir_ in dirs:\n        print('  ', the_counter, 'Dir:', dir_)\n    for file_ in files:\n        caminho_completo_arquivo = os.path.join(root, file_)\n        # tamanho = os.path.getsize(caminho_completo_arquivo)",
        "detail": "modulosDePython.teoria_ospath_getsize_osstat",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "modulosDePython.teoria_ospath_getsize_osstat",
        "description": "modulosDePython.teoria_ospath_getsize_osstat",
        "peekOfCode": "counter = count()\nfor root, dirs, files in os.walk(caminho):\n    the_counter = next(counter)\n    print(the_counter, 'Pasta atual', root)\n    for dir_ in dirs:\n        print('  ', the_counter, 'Dir:', dir_)\n    for file_ in files:\n        caminho_completo_arquivo = os.path.join(root, file_)\n        # tamanho = os.path.getsize(caminho_completo_arquivo)\n        stats = os.stat(caminho_completo_arquivo)",
        "detail": "modulosDePython.teoria_ospath_getsize_osstat",
        "documentation": {}
    },
    {
        "label": "caminho",
        "kind": 5,
        "importPath": "modulosDePython.teoria_oswalk",
        "description": "modulosDePython.teoria_oswalk",
        "peekOfCode": "caminho = os.path.join('/Users', 'Diogo', 'Desktop', 'EXEMPLO')\ncounter = count()\nfor root, dirs, files in os.walk(caminho):\n    the_counter = next(counter)\n    print(the_counter, 'Pasta atual', root)\n    for dir_ in dirs:\n        print('  ', the_counter, 'Dir:', dir_)\n    for file_ in files:\n        caminho_completo_arquivo = os.path.join(root, file_)\n        print('  ', the_counter, 'FILE:', caminho_completo_arquivo)",
        "detail": "modulosDePython.teoria_oswalk",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "modulosDePython.teoria_oswalk",
        "description": "modulosDePython.teoria_oswalk",
        "peekOfCode": "counter = count()\nfor root, dirs, files in os.walk(caminho):\n    the_counter = next(counter)\n    print(the_counter, 'Pasta atual', root)\n    for dir_ in dirs:\n        print('  ', the_counter, 'Dir:', dir_)\n    for file_ in files:\n        caminho_completo_arquivo = os.path.join(root, file_)\n        print('  ', the_counter, 'FILE:', caminho_completo_arquivo)\n        # NÃO FAÇA ISSO (VAI APAGAR TUDO DA PASTA)",
        "detail": "modulosDePython.teoria_oswalk",
        "documentation": {}
    },
    {
        "label": "r_range",
        "kind": 5,
        "importPath": "modulosDePython.teoria_radom",
        "description": "modulosDePython.teoria_radom",
        "peekOfCode": "r_range = random.randrange(10, 20, 2)\n# print(r_range)\n# random.randint(início, fim)\n#   -> Gera um número inteiro aleatório dentro de um intervalo \"sem passo\"\nr_int = random.randint(10, 20)\n# print(r_int)\n# random.uniform(início, fim)\n#   -> Gera um número flutuante aleatório dentro de um intervalo \"sem passo\"\nr_uniform = random.uniform(10, 20)\n# print(r_uniform)",
        "detail": "modulosDePython.teoria_radom",
        "documentation": {}
    },
    {
        "label": "r_int",
        "kind": 5,
        "importPath": "modulosDePython.teoria_radom",
        "description": "modulosDePython.teoria_radom",
        "peekOfCode": "r_int = random.randint(10, 20)\n# print(r_int)\n# random.uniform(início, fim)\n#   -> Gera um número flutuante aleatório dentro de um intervalo \"sem passo\"\nr_uniform = random.uniform(10, 20)\n# print(r_uniform)\n# random.shuffle(SequenciaMutável) -> Embaralha a lista original\nnomes = ['Luiz', 'Maria', 'Helena', 'Joana']\n# random.shuffle(nomes)\n# print(nomes)",
        "detail": "modulosDePython.teoria_radom",
        "documentation": {}
    },
    {
        "label": "r_uniform",
        "kind": 5,
        "importPath": "modulosDePython.teoria_radom",
        "description": "modulosDePython.teoria_radom",
        "peekOfCode": "r_uniform = random.uniform(10, 20)\n# print(r_uniform)\n# random.shuffle(SequenciaMutável) -> Embaralha a lista original\nnomes = ['Luiz', 'Maria', 'Helena', 'Joana']\n# random.shuffle(nomes)\n# print(nomes)\n# random.sample(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (não repete)\nnovos_nomes = random.sample(nomes, k=3)\n# print(nomes)",
        "detail": "modulosDePython.teoria_radom",
        "documentation": {}
    },
    {
        "label": "nomes",
        "kind": 5,
        "importPath": "modulosDePython.teoria_radom",
        "description": "modulosDePython.teoria_radom",
        "peekOfCode": "nomes = ['Luiz', 'Maria', 'Helena', 'Joana']\n# random.shuffle(nomes)\n# print(nomes)\n# random.sample(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (não repete)\nnovos_nomes = random.sample(nomes, k=3)\n# print(nomes)\n# print(novos_nomes)\n# random.choices(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (repete valores)",
        "detail": "modulosDePython.teoria_radom",
        "documentation": {}
    },
    {
        "label": "novos_nomes",
        "kind": 5,
        "importPath": "modulosDePython.teoria_radom",
        "description": "modulosDePython.teoria_radom",
        "peekOfCode": "novos_nomes = random.sample(nomes, k=3)\n# print(nomes)\n# print(novos_nomes)\n# random.choices(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (repete valores)\nnovos_nomes = random.choices(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choice(Iterável) -> Escolhe um elemento do iterável\nprint(random.choice(nomes))",
        "detail": "modulosDePython.teoria_radom",
        "documentation": {}
    },
    {
        "label": "novos_nomes",
        "kind": 5,
        "importPath": "modulosDePython.teoria_radom",
        "description": "modulosDePython.teoria_radom",
        "peekOfCode": "novos_nomes = random.choices(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choice(Iterável) -> Escolhe um elemento do iterável\nprint(random.choice(nomes))",
        "detail": "modulosDePython.teoria_radom",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 5,
        "importPath": "modulosDePython.teoria_secrets",
        "description": "modulosDePython.teoria_secrets",
        "peekOfCode": "random = secrets.SystemRandom()\n# print(secrets.randbelow(100))\n# print(secrets.choice([10, 11, 12]))\n# Funções:\n# seed\n#   -> NÃO FAZ NADA\nrandom.seed(10)\n# random.randrange(início, fim, passo)\n#   -> Gera um número inteiro aleatório dentro de um intervalo específico\nr_range = random.randrange(10, 20, 2)",
        "detail": "modulosDePython.teoria_secrets",
        "documentation": {}
    },
    {
        "label": "r_range",
        "kind": 5,
        "importPath": "modulosDePython.teoria_secrets",
        "description": "modulosDePython.teoria_secrets",
        "peekOfCode": "r_range = random.randrange(10, 20, 2)\nprint(r_range)\n# random.randint(início, fim)\n#   -> Gera um número inteiro aleatório dentro de um intervalo \"sem passo\"\nr_int = random.randint(10, 20)\nprint(r_int)\n# random.uniform(início, fim)\n#   -> Gera um número flutuante aleatório dentro de um intervalo \"sem passo\"\nr_uniform = random.uniform(10, 20)\nprint(r_uniform)",
        "detail": "modulosDePython.teoria_secrets",
        "documentation": {}
    },
    {
        "label": "r_int",
        "kind": 5,
        "importPath": "modulosDePython.teoria_secrets",
        "description": "modulosDePython.teoria_secrets",
        "peekOfCode": "r_int = random.randint(10, 20)\nprint(r_int)\n# random.uniform(início, fim)\n#   -> Gera um número flutuante aleatório dentro de um intervalo \"sem passo\"\nr_uniform = random.uniform(10, 20)\nprint(r_uniform)\n# random.shuffle(SequenciaMutável) -> Embaralha a lista original\nnomes = ['Luiz', 'Maria', 'Helena', 'Joana']\n# random.shuffle(nomes)\nprint(nomes)",
        "detail": "modulosDePython.teoria_secrets",
        "documentation": {}
    },
    {
        "label": "r_uniform",
        "kind": 5,
        "importPath": "modulosDePython.teoria_secrets",
        "description": "modulosDePython.teoria_secrets",
        "peekOfCode": "r_uniform = random.uniform(10, 20)\nprint(r_uniform)\n# random.shuffle(SequenciaMutável) -> Embaralha a lista original\nnomes = ['Luiz', 'Maria', 'Helena', 'Joana']\n# random.shuffle(nomes)\nprint(nomes)\n# random.sample(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (não repete)\nnovos_nomes = random.sample(nomes, k=3)\nprint(nomes)",
        "detail": "modulosDePython.teoria_secrets",
        "documentation": {}
    },
    {
        "label": "nomes",
        "kind": 5,
        "importPath": "modulosDePython.teoria_secrets",
        "description": "modulosDePython.teoria_secrets",
        "peekOfCode": "nomes = ['Luiz', 'Maria', 'Helena', 'Joana']\n# random.shuffle(nomes)\nprint(nomes)\n# random.sample(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (não repete)\nnovos_nomes = random.sample(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choices(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (repete valores)",
        "detail": "modulosDePython.teoria_secrets",
        "documentation": {}
    },
    {
        "label": "novos_nomes",
        "kind": 5,
        "importPath": "modulosDePython.teoria_secrets",
        "description": "modulosDePython.teoria_secrets",
        "peekOfCode": "novos_nomes = random.sample(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choices(Iterável, k=N)\n#   -> Escolhe elementos do iterável e retorna outro iterável (repete valores)\nnovos_nomes = random.choices(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choice(Iterável) -> Escolhe um elemento do iterável\nprint(random.choice(nomes))",
        "detail": "modulosDePython.teoria_secrets",
        "documentation": {}
    },
    {
        "label": "novos_nomes",
        "kind": 5,
        "importPath": "modulosDePython.teoria_secrets",
        "description": "modulosDePython.teoria_secrets",
        "peekOfCode": "novos_nomes = random.choices(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choice(Iterável) -> Escolhe um elemento do iterável\nprint(random.choice(nomes))",
        "detail": "modulosDePython.teoria_secrets",
        "documentation": {}
    },
    {
        "label": "HOME",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil",
        "description": "modulosDePython.teoria_shutil",
        "peekOfCode": "HOME = os.path.expanduser('~')\nDESKTOP = os.path.join(HOME, 'Desktop')\nPASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nos.makedirs(NOVA_PASTA, exist_ok=True)\nfor root, dirs, files in os.walk(PASTA_ORIGINAL):\n    for dir_ in dirs:\n        caminnho_novo_diretorio = os.path.join(\n            root.replace(PASTA_ORIGINAL, NOVA_PASTA), dir_\n        )",
        "detail": "modulosDePython.teoria_shutil",
        "documentation": {}
    },
    {
        "label": "DESKTOP",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil",
        "description": "modulosDePython.teoria_shutil",
        "peekOfCode": "DESKTOP = os.path.join(HOME, 'Desktop')\nPASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nos.makedirs(NOVA_PASTA, exist_ok=True)\nfor root, dirs, files in os.walk(PASTA_ORIGINAL):\n    for dir_ in dirs:\n        caminnho_novo_diretorio = os.path.join(\n            root.replace(PASTA_ORIGINAL, NOVA_PASTA), dir_\n        )\n        os.makedirs(caminnho_novo_diretorio, exist_ok=True)",
        "detail": "modulosDePython.teoria_shutil",
        "documentation": {}
    },
    {
        "label": "PASTA_ORIGINAL",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil",
        "description": "modulosDePython.teoria_shutil",
        "peekOfCode": "PASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nos.makedirs(NOVA_PASTA, exist_ok=True)\nfor root, dirs, files in os.walk(PASTA_ORIGINAL):\n    for dir_ in dirs:\n        caminnho_novo_diretorio = os.path.join(\n            root.replace(PASTA_ORIGINAL, NOVA_PASTA), dir_\n        )\n        os.makedirs(caminnho_novo_diretorio, exist_ok=True)\n    for file in files:",
        "detail": "modulosDePython.teoria_shutil",
        "documentation": {}
    },
    {
        "label": "NOVA_PASTA",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil",
        "description": "modulosDePython.teoria_shutil",
        "peekOfCode": "NOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nos.makedirs(NOVA_PASTA, exist_ok=True)\nfor root, dirs, files in os.walk(PASTA_ORIGINAL):\n    for dir_ in dirs:\n        caminnho_novo_diretorio = os.path.join(\n            root.replace(PASTA_ORIGINAL, NOVA_PASTA), dir_\n        )\n        os.makedirs(caminnho_novo_diretorio, exist_ok=True)\n    for file in files:\n        caminho_arquivo = os.path.join(root, file)",
        "detail": "modulosDePython.teoria_shutil",
        "documentation": {}
    },
    {
        "label": "HOME",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil_delete",
        "description": "modulosDePython.teoria_shutil_delete",
        "peekOfCode": "HOME = os.path.expanduser('~')\nDESKTOP = os.path.join(HOME, 'Desktop')\nPASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\nshutil.copytree(PASTA_ORIGINAL, NOVA_PASTA)\n# shutil.move(NOVA_PASTA, NOVA_PASTA + '_EITA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\n# os.makedirs(NOVA_PASTA, exist_ok=True)\n# for root, dirs, files in os.walk(PASTA_ORIGINAL):",
        "detail": "modulosDePython.teoria_shutil_delete",
        "documentation": {}
    },
    {
        "label": "DESKTOP",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil_delete",
        "description": "modulosDePython.teoria_shutil_delete",
        "peekOfCode": "DESKTOP = os.path.join(HOME, 'Desktop')\nPASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\nshutil.copytree(PASTA_ORIGINAL, NOVA_PASTA)\n# shutil.move(NOVA_PASTA, NOVA_PASTA + '_EITA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\n# os.makedirs(NOVA_PASTA, exist_ok=True)\n# for root, dirs, files in os.walk(PASTA_ORIGINAL):\n#     for dir_ in dirs:",
        "detail": "modulosDePython.teoria_shutil_delete",
        "documentation": {}
    },
    {
        "label": "PASTA_ORIGINAL",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil_delete",
        "description": "modulosDePython.teoria_shutil_delete",
        "peekOfCode": "PASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\nshutil.copytree(PASTA_ORIGINAL, NOVA_PASTA)\n# shutil.move(NOVA_PASTA, NOVA_PASTA + '_EITA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\n# os.makedirs(NOVA_PASTA, exist_ok=True)\n# for root, dirs, files in os.walk(PASTA_ORIGINAL):\n#     for dir_ in dirs:\n#         caminnho_novo_diretorio = os.path.join(",
        "detail": "modulosDePython.teoria_shutil_delete",
        "documentation": {}
    },
    {
        "label": "NOVA_PASTA",
        "kind": 5,
        "importPath": "modulosDePython.teoria_shutil_delete",
        "description": "modulosDePython.teoria_shutil_delete",
        "peekOfCode": "NOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\nshutil.copytree(PASTA_ORIGINAL, NOVA_PASTA)\n# shutil.move(NOVA_PASTA, NOVA_PASTA + '_EITA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\n# os.makedirs(NOVA_PASTA, exist_ok=True)\n# for root, dirs, files in os.walk(PASTA_ORIGINAL):\n#     for dir_ in dirs:\n#         caminnho_novo_diretorio = os.path.join(\n#             root.replace(PASTA_ORIGINAL, NOVA_PASTA), dir_",
        "detail": "modulosDePython.teoria_shutil_delete",
        "documentation": {}
    },
    {
        "label": "MyTemplate",
        "kind": 6,
        "importPath": "modulosDePython.teoria_stringTemplate",
        "description": "modulosDePython.teoria_stringTemplate",
        "peekOfCode": "class MyTemplate(string.Template):\n    delimiter = '%'\nwith open(CAMINHO_ARQUIVO, 'r') as arquivo:\n    texto = arquivo.read()\n    template = MyTemplate(texto)\n    print(template.substitute(dados))",
        "detail": "modulosDePython.teoria_stringTemplate",
        "documentation": {}
    },
    {
        "label": "converte_para_brl",
        "kind": 2,
        "importPath": "modulosDePython.teoria_stringTemplate",
        "description": "modulosDePython.teoria_stringTemplate",
        "peekOfCode": "def converte_para_brl(numero: float) -> str:\n    brl = 'R$ ' + locale.currency(numero, symbol=False, grouping=True)\n    return brl\ndata = datetime(2022, 12, 28)\ndados = dict(\n    nome='João',\n    valor=converte_para_brl(1_234_456),\n    data=data.strftime('%d/%m/%Y'),\n    empresa='O. M.',\n    telefone='+55 (11) 7890-5432'",
        "detail": "modulosDePython.teoria_stringTemplate",
        "documentation": {}
    },
    {
        "label": "CAMINHO_ARQUIVO",
        "kind": 5,
        "importPath": "modulosDePython.teoria_stringTemplate",
        "description": "modulosDePython.teoria_stringTemplate",
        "peekOfCode": "CAMINHO_ARQUIVO = Path(__file__).parent / 'template.txt'\nlocale.setlocale(locale.LC_ALL, '')\ndef converte_para_brl(numero: float) -> str:\n    brl = 'R$ ' + locale.currency(numero, symbol=False, grouping=True)\n    return brl\ndata = datetime(2022, 12, 28)\ndados = dict(\n    nome='João',\n    valor=converte_para_brl(1_234_456),\n    data=data.strftime('%d/%m/%Y'),",
        "detail": "modulosDePython.teoria_stringTemplate",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "modulosDePython.teoria_stringTemplate",
        "description": "modulosDePython.teoria_stringTemplate",
        "peekOfCode": "data = datetime(2022, 12, 28)\ndados = dict(\n    nome='João',\n    valor=converte_para_brl(1_234_456),\n    data=data.strftime('%d/%m/%Y'),\n    empresa='O. M.',\n    telefone='+55 (11) 7890-5432'\n)\nclass MyTemplate(string.Template):\n    delimiter = '%'",
        "detail": "modulosDePython.teoria_stringTemplate",
        "documentation": {}
    },
    {
        "label": "dados",
        "kind": 5,
        "importPath": "modulosDePython.teoria_stringTemplate",
        "description": "modulosDePython.teoria_stringTemplate",
        "peekOfCode": "dados = dict(\n    nome='João',\n    valor=converte_para_brl(1_234_456),\n    data=data.strftime('%d/%m/%Y'),\n    empresa='O. M.',\n    telefone='+55 (11) 7890-5432'\n)\nclass MyTemplate(string.Template):\n    delimiter = '%'\nwith open(CAMINHO_ARQUIVO, 'r') as arquivo:",
        "detail": "modulosDePython.teoria_stringTemplate",
        "documentation": {}
    },
    {
        "label": "MeuThread",
        "kind": 6,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "class MeuThread(Thread):\n    def __init__(self, texto, tempo):\n        self.texto = texto\n        self.tempo = tempo\n        super().__init__()\n    def run(self):\n        sleep(self.tempo)\n        print(self.texto)\nt1 = MeuThread('Thread 1', 5)\nt1.start()",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "Ingressos",
        "kind": 6,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "class Ingressos:\n    \"\"\"\n    Classe que vende ingressos\n    \"\"\"\n    def __init__(self, estoque: int):\n        \"\"\" Inicializando...\n        :param estoque: quantidade de ingressos em estoque\n        \"\"\"\n        self.estoque = estoque\n        # Nosso cadeado",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "vai_demorar",
        "kind": 2,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "def vai_demorar(texto, tempo):\n    sleep(tempo)\n    print(texto)\nt1 = Thread(target=vai_demorar, args=('Olá mundo 1!', 5))\nt1.start()\nt2 = Thread(target=vai_demorar, args=('Olá mundo 2!', 1))\nt2.start()\nt3 = Thread(target=vai_demorar, args=('Olá mundo 3!', 2))\nt3.start()\nfor i in range(20):",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "vai_demorar",
        "kind": 2,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "def vai_demorar(texto, tempo):\n    sleep(tempo)\n    print(texto)\nt1 = Thread(target=vai_demorar, args=('Olá mundo 1!', 10))\nt1.start()\nt1.join()\nprint('Thread acabou!')\n\"\"\"\nclass Ingressos:\n    \"\"\"",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "t1 = MeuThread('Thread 1', 5)\nt1.start()\nt2 = MeuThread('Thread 2', 3)\nt2.start()\nt3 = MeuThread('Thread 3', 2)\nt3.start()\nfor i in range(20):\n    print(i)\n    sleep(1)\n\"\"\"",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "t2 = MeuThread('Thread 2', 3)\nt2.start()\nt3 = MeuThread('Thread 3', 2)\nt3.start()\nfor i in range(20):\n    print(i)\n    sleep(1)\n\"\"\"\n\"\"\"\ndef vai_demorar(texto, tempo):",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "t3 = MeuThread('Thread 3', 2)\nt3.start()\nfor i in range(20):\n    print(i)\n    sleep(1)\n\"\"\"\n\"\"\"\ndef vai_demorar(texto, tempo):\n    sleep(tempo)\n    print(texto)",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "t1 = Thread(target=vai_demorar, args=('Olá mundo 1!', 5))\nt1.start()\nt2 = Thread(target=vai_demorar, args=('Olá mundo 2!', 1))\nt2.start()\nt3 = Thread(target=vai_demorar, args=('Olá mundo 3!', 2))\nt3.start()\nfor i in range(20):\n    print(i)\n    sleep(.5)\n\"\"\"",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "t2 = Thread(target=vai_demorar, args=('Olá mundo 2!', 1))\nt2.start()\nt3 = Thread(target=vai_demorar, args=('Olá mundo 3!', 2))\nt3.start()\nfor i in range(20):\n    print(i)\n    sleep(.5)\n\"\"\"\n\"\"\"\ndef vai_demorar(texto, tempo):",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "t3 = Thread(target=vai_demorar, args=('Olá mundo 3!', 2))\nt3.start()\nfor i in range(20):\n    print(i)\n    sleep(.5)\n\"\"\"\n\"\"\"\ndef vai_demorar(texto, tempo):\n    sleep(tempo)\n    print(texto)",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "modulosDePython.teoria_threats",
        "description": "modulosDePython.teoria_threats",
        "peekOfCode": "t1 = Thread(target=vai_demorar, args=('Olá mundo 1!', 10))\nt1.start()\nt1.join()\nprint('Thread acabou!')\n\"\"\"\nclass Ingressos:\n    \"\"\"\n    Classe que vende ingressos\n    \"\"\"\n    def __init__(self, estoque: int):",
        "detail": "modulosDePython.teoria_threats",
        "documentation": {}
    },
    {
        "label": "ROOT_FOLDER",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "ROOT_FOLDER = Path(__file__).parent\nORIGINAL = ROOT_FOLDER / 'original.JPG'\nNEW_IMAGE = ROOT_FOLDER / ' new.JPG'\npil_image = Image.open(ORIGINAL)\nwidth, height = pil_image.size\nexif = pil_image.info['exif']\n# width     new_width\n# height    ??\nnew_width = 640\nnew_height = round(height * new_width / width)",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "ORIGINAL",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "ORIGINAL = ROOT_FOLDER / 'original.JPG'\nNEW_IMAGE = ROOT_FOLDER / ' new.JPG'\npil_image = Image.open(ORIGINAL)\nwidth, height = pil_image.size\nexif = pil_image.info['exif']\n# width     new_width\n# height    ??\nnew_width = 640\nnew_height = round(height * new_width / width)\nnew_image = pil_image.resize(size=(new_width, new_height))",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "NEW_IMAGE",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "NEW_IMAGE = ROOT_FOLDER / ' new.JPG'\npil_image = Image.open(ORIGINAL)\nwidth, height = pil_image.size\nexif = pil_image.info['exif']\n# width     new_width\n# height    ??\nnew_width = 640\nnew_height = round(height * new_width / width)\nnew_image = pil_image.resize(size=(new_width, new_height))\nnew_image.save(",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "pil_image",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "pil_image = Image.open(ORIGINAL)\nwidth, height = pil_image.size\nexif = pil_image.info['exif']\n# width     new_width\n# height    ??\nnew_width = 640\nnew_height = round(height * new_width / width)\nnew_image = pil_image.resize(size=(new_width, new_height))\nnew_image.save(\n    NEW_IMAGE,",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "exif",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "exif = pil_image.info['exif']\n# width     new_width\n# height    ??\nnew_width = 640\nnew_height = round(height * new_width / width)\nnew_image = pil_image.resize(size=(new_width, new_height))\nnew_image.save(\n    NEW_IMAGE,\n    optimize=True,\n    quality=70,",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "new_width",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "new_width = 640\nnew_height = round(height * new_width / width)\nnew_image = pil_image.resize(size=(new_width, new_height))\nnew_image.save(\n    NEW_IMAGE,\n    optimize=True,\n    quality=70,\n    # exif=exif,\n)",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "new_height",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "new_height = round(height * new_width / width)\nnew_image = pil_image.resize(size=(new_width, new_height))\nnew_image.save(\n    NEW_IMAGE,\n    optimize=True,\n    quality=70,\n    # exif=exif,\n)",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "new_image",
        "kind": 5,
        "importPath": "PhotoShopPython.main",
        "description": "PhotoShopPython.main",
        "peekOfCode": "new_image = pil_image.resize(size=(new_width, new_height))\nnew_image.save(\n    NEW_IMAGE,\n    optimize=True,\n    quality=70,\n    # exif=exif,\n)",
        "detail": "PhotoShopPython.main",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "python.aula1",
        "description": "python.aula1",
        "peekOfCode": "nome = 'joao'\nsobrenome = 'silva'\nidade = 25\nano_nascimento =  2024 - idade \nmaior_de_idade = idade >= 18\naltura_metros = 1.75\nprint('nome: ', nome)\nprint('sobrenome: ', sobrenome)\nprint('Idade: ', idade)\nprint('ano de nascimento: ', ano_nascimento)",
        "detail": "python.aula1",
        "documentation": {}
    },
    {
        "label": "sobrenome",
        "kind": 5,
        "importPath": "python.aula1",
        "description": "python.aula1",
        "peekOfCode": "sobrenome = 'silva'\nidade = 25\nano_nascimento =  2024 - idade \nmaior_de_idade = idade >= 18\naltura_metros = 1.75\nprint('nome: ', nome)\nprint('sobrenome: ', sobrenome)\nprint('Idade: ', idade)\nprint('ano de nascimento: ', ano_nascimento)\nprint('é maior de idade?: ', maior_de_idade)",
        "detail": "python.aula1",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "python.aula1",
        "description": "python.aula1",
        "peekOfCode": "idade = 25\nano_nascimento =  2024 - idade \nmaior_de_idade = idade >= 18\naltura_metros = 1.75\nprint('nome: ', nome)\nprint('sobrenome: ', sobrenome)\nprint('Idade: ', idade)\nprint('ano de nascimento: ', ano_nascimento)\nprint('é maior de idade?: ', maior_de_idade)\nprint('Altura em metros: ', altura_metros)",
        "detail": "python.aula1",
        "documentation": {}
    },
    {
        "label": "ano_nascimento",
        "kind": 5,
        "importPath": "python.aula1",
        "description": "python.aula1",
        "peekOfCode": "ano_nascimento =  2024 - idade \nmaior_de_idade = idade >= 18\naltura_metros = 1.75\nprint('nome: ', nome)\nprint('sobrenome: ', sobrenome)\nprint('Idade: ', idade)\nprint('ano de nascimento: ', ano_nascimento)\nprint('é maior de idade?: ', maior_de_idade)\nprint('Altura em metros: ', altura_metros)",
        "detail": "python.aula1",
        "documentation": {}
    },
    {
        "label": "maior_de_idade",
        "kind": 5,
        "importPath": "python.aula1",
        "description": "python.aula1",
        "peekOfCode": "maior_de_idade = idade >= 18\naltura_metros = 1.75\nprint('nome: ', nome)\nprint('sobrenome: ', sobrenome)\nprint('Idade: ', idade)\nprint('ano de nascimento: ', ano_nascimento)\nprint('é maior de idade?: ', maior_de_idade)\nprint('Altura em metros: ', altura_metros)",
        "detail": "python.aula1",
        "documentation": {}
    },
    {
        "label": "altura_metros",
        "kind": 5,
        "importPath": "python.aula1",
        "description": "python.aula1",
        "peekOfCode": "altura_metros = 1.75\nprint('nome: ', nome)\nprint('sobrenome: ', sobrenome)\nprint('Idade: ', idade)\nprint('ano de nascimento: ', ano_nascimento)\nprint('é maior de idade?: ', maior_de_idade)\nprint('Altura em metros: ', altura_metros)",
        "detail": "python.aula1",
        "documentation": {}
    },
    {
        "label": "make_edge_browser",
        "kind": 2,
        "importPath": "selenium.main",
        "description": "selenium.main",
        "peekOfCode": "def make_edge_browser(*options: str) -> webdriver.Edge:\n    edge_options = webdriver.EdgeOptions()\n    # edge_options.add_argument('--headless')\n    if options is not None:\n        for option in options:\n            edge_options.add_argument(option)\n    edge_service = Service(\n        executable_path=str(EDG_WEBDRIVER_EXEC),\n    )\n    browser = webdriver.Edge(",
        "detail": "selenium.main",
        "documentation": {}
    },
    {
        "label": "ROOT_FOLDER",
        "kind": 5,
        "importPath": "selenium.main",
        "description": "selenium.main",
        "peekOfCode": "ROOT_FOLDER = Path(__file__).parent\n# Caminho para a pasta onde o chromedriver está\nEDG_WEBDRIVER_EXEC = ROOT_FOLDER / 'drivers' / 'msedgedriver.exe'\ndef make_edge_browser(*options: str) -> webdriver.Edge:\n    edge_options = webdriver.EdgeOptions()\n    # edge_options.add_argument('--headless')\n    if options is not None:\n        for option in options:\n            edge_options.add_argument(option)\n    edge_service = Service(",
        "detail": "selenium.main",
        "documentation": {}
    },
    {
        "label": "EDG_WEBDRIVER_EXEC",
        "kind": 5,
        "importPath": "selenium.main",
        "description": "selenium.main",
        "peekOfCode": "EDG_WEBDRIVER_EXEC = ROOT_FOLDER / 'drivers' / 'msedgedriver.exe'\ndef make_edge_browser(*options: str) -> webdriver.Edge:\n    edge_options = webdriver.EdgeOptions()\n    # edge_options.add_argument('--headless')\n    if options is not None:\n        for option in options:\n            edge_options.add_argument(option)\n    edge_service = Service(\n        executable_path=str(EDG_WEBDRIVER_EXEC),\n    )",
        "detail": "selenium.main",
        "documentation": {}
    },
    {
        "label": "Escritor",
        "kind": 6,
        "importPath": "exemplo_agregacao",
        "description": "exemplo_agregacao",
        "peekOfCode": "class Escritor:\n    def __init__(self, nome) -> None:\n        self.nome = nome\n        self._ferramenta = None\n    @property\n    def ferramenta(self):\n        return self._ferramenta\n    @ferramenta.setter\n    def ferramenta(self, ferramenta):\n        self._ferramenta = ferramenta",
        "detail": "exemplo_agregacao",
        "documentation": {}
    },
    {
        "label": "FerramentaDeEscrever",
        "kind": 6,
        "importPath": "exemplo_agregacao",
        "description": "exemplo_agregacao",
        "peekOfCode": "class FerramentaDeEscrever:\n    def __init__(self, nome):\n        self.nome = nome\n    def escrever(self):\n        return f'{self.nome} está escrevendo'\nescritor = Escritor('Luiz')\ncaneta = FerramentaDeEscrever('Caneta Bic')\nmaquina_de_escrever = FerramentaDeEscrever('Máquina')\nescritor.ferramenta = maquina_de_escrever\nprint(caneta.escrever())",
        "detail": "exemplo_agregacao",
        "documentation": {}
    },
    {
        "label": "escritor",
        "kind": 5,
        "importPath": "exemplo_agregacao",
        "description": "exemplo_agregacao",
        "peekOfCode": "escritor = Escritor('Luiz')\ncaneta = FerramentaDeEscrever('Caneta Bic')\nmaquina_de_escrever = FerramentaDeEscrever('Máquina')\nescritor.ferramenta = maquina_de_escrever\nprint(caneta.escrever())\nprint(maquina_de_escrever.escrever())\nprint(escritor.ferramenta.escrever())",
        "detail": "exemplo_agregacao",
        "documentation": {}
    },
    {
        "label": "caneta",
        "kind": 5,
        "importPath": "exemplo_agregacao",
        "description": "exemplo_agregacao",
        "peekOfCode": "caneta = FerramentaDeEscrever('Caneta Bic')\nmaquina_de_escrever = FerramentaDeEscrever('Máquina')\nescritor.ferramenta = maquina_de_escrever\nprint(caneta.escrever())\nprint(maquina_de_escrever.escrever())\nprint(escritor.ferramenta.escrever())",
        "detail": "exemplo_agregacao",
        "documentation": {}
    },
    {
        "label": "maquina_de_escrever",
        "kind": 5,
        "importPath": "exemplo_agregacao",
        "description": "exemplo_agregacao",
        "peekOfCode": "maquina_de_escrever = FerramentaDeEscrever('Máquina')\nescritor.ferramenta = maquina_de_escrever\nprint(caneta.escrever())\nprint(maquina_de_escrever.escrever())\nprint(escritor.ferramenta.escrever())",
        "detail": "exemplo_agregacao",
        "documentation": {}
    },
    {
        "label": "escritor.ferramenta",
        "kind": 5,
        "importPath": "exemplo_agregacao",
        "description": "exemplo_agregacao",
        "peekOfCode": "escritor.ferramenta = maquina_de_escrever\nprint(caneta.escrever())\nprint(maquina_de_escrever.escrever())\nprint(escritor.ferramenta.escrever())",
        "detail": "exemplo_agregacao",
        "documentation": {}
    },
    {
        "label": "mostro_argumentos_nomeados",
        "kind": 2,
        "importPath": "exemplo_args_kwargs",
        "description": "exemplo_args_kwargs",
        "peekOfCode": "def mostro_argumentos_nomeados(*args, **kwargs):\n    print('NÃO NOMEADOS:', args)\n    for chave, valor in kwargs.items():\n        print(chave, valor)\n# mostro_argumentos_nomeados(nome='Joana', qlq=123)\n# mostro_argumentos_nomeados(**pessoas_completa)\nconfiguracoes = {\n    'arg1': 1,\n    'arg2': 2,\n    'arg3': 3,",
        "detail": "exemplo_args_kwargs",
        "documentation": {}
    },
    {
        "label": "pessoa",
        "kind": 5,
        "importPath": "exemplo_args_kwargs",
        "description": "exemplo_args_kwargs",
        "peekOfCode": "pessoa = {\n    'nome': 'Aline',\n    'sobrenome': 'Souza',\n}\ndados_pessoa = {\n    'idade': 16,\n    'altura': 1.6,\n}\npessoas_completa = {**pessoa, **dados_pessoa}\n# print(pessoas_completa)",
        "detail": "exemplo_args_kwargs",
        "documentation": {}
    },
    {
        "label": "dados_pessoa",
        "kind": 5,
        "importPath": "exemplo_args_kwargs",
        "description": "exemplo_args_kwargs",
        "peekOfCode": "dados_pessoa = {\n    'idade': 16,\n    'altura': 1.6,\n}\npessoas_completa = {**pessoa, **dados_pessoa}\n# print(pessoas_completa)\n# args e kwargs\n# args (já vimos)\n# kwargs - keyword arguments (argumentos nomeados)\ndef mostro_argumentos_nomeados(*args, **kwargs):",
        "detail": "exemplo_args_kwargs",
        "documentation": {}
    },
    {
        "label": "pessoas_completa",
        "kind": 5,
        "importPath": "exemplo_args_kwargs",
        "description": "exemplo_args_kwargs",
        "peekOfCode": "pessoas_completa = {**pessoa, **dados_pessoa}\n# print(pessoas_completa)\n# args e kwargs\n# args (já vimos)\n# kwargs - keyword arguments (argumentos nomeados)\ndef mostro_argumentos_nomeados(*args, **kwargs):\n    print('NÃO NOMEADOS:', args)\n    for chave, valor in kwargs.items():\n        print(chave, valor)\n# mostro_argumentos_nomeados(nome='Joana', qlq=123)",
        "detail": "exemplo_args_kwargs",
        "documentation": {}
    },
    {
        "label": "configuracoes",
        "kind": 5,
        "importPath": "exemplo_args_kwargs",
        "description": "exemplo_args_kwargs",
        "peekOfCode": "configuracoes = {\n    'arg1': 1,\n    'arg2': 2,\n    'arg3': 3,\n    'arg4': 4,\n}\nmostro_argumentos_nomeados(**configuracoes)",
        "detail": "exemplo_args_kwargs",
        "documentation": {}
    },
    {
        "label": "Carrinho",
        "kind": 6,
        "importPath": "exemplo_composicao",
        "description": "exemplo_composicao",
        "peekOfCode": "class Carrinho:\n    def __init__(self):\n        self._produtos = []\n    def total(self):\n        return sum([p.preco for p in self._produtos])\n    def inserir_produtos(self, *produtos):\n        # self._produtos.extend(produtos)\n        # self._produtos += produtos\n        for produto in produtos:\n            self._produtos.append(produto)",
        "detail": "exemplo_composicao",
        "documentation": {}
    },
    {
        "label": "Produto",
        "kind": 6,
        "importPath": "exemplo_composicao",
        "description": "exemplo_composicao",
        "peekOfCode": "class Produto:\n    def __init__(self, nome, preco):\n        self.nome = nome\n        self.preco = preco\ncarrinho = Carrinho()\np1, p2 = Produto('Caneta', 1.20), Produto('Camiseta', 20)\ncarrinho.inserir_produtos(p1, p2)\ncarrinho.listar_produtos()\nprint(carrinho.total())",
        "detail": "exemplo_composicao",
        "documentation": {}
    },
    {
        "label": "carrinho",
        "kind": 5,
        "importPath": "exemplo_composicao",
        "description": "exemplo_composicao",
        "peekOfCode": "carrinho = Carrinho()\np1, p2 = Produto('Caneta', 1.20), Produto('Camiseta', 20)\ncarrinho.inserir_produtos(p1, p2)\ncarrinho.listar_produtos()\nprint(carrinho.total())",
        "detail": "exemplo_composicao",
        "documentation": {}
    },
    {
        "label": "criar_funcao",
        "kind": 2,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "def criar_funcao(func):\n    def interna(*args, **kwargs):\n        print('Vou te decorar')\n        for arg in args:\n            e_string(arg)\n        resultado = func(*args, **kwargs)\n        print(f'O seu resultado foi {resultado}.')\n        print('Ok, agora você foi decorada')\n        return resultado\n    return interna",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "inverte_string",
        "kind": 2,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "def inverte_string(string):\n    print(f'{inverte_string.__name__}')\n    return string[::-1]\ndef e_string(param):\n    if not isinstance(param, str):\n        raise TypeError('param deve ser uma string')\ninvertida = inverte_string('123')\nprint(invertida)\ndef fabrica_de_decoradores(a=None, b=None, c=None):\n    def fabrica_de_funcoes(func):",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "e_string",
        "kind": 2,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "def e_string(param):\n    if not isinstance(param, str):\n        raise TypeError('param deve ser uma string')\ninvertida = inverte_string('123')\nprint(invertida)\ndef fabrica_de_decoradores(a=None, b=None, c=None):\n    def fabrica_de_funcoes(func):\n        print('Decoradora 1')\n        def aninhada(*args, **kwargs):\n            print('Parâmetros do decorador, ', a, b, c)",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "fabrica_de_decoradores",
        "kind": 2,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "def fabrica_de_decoradores(a=None, b=None, c=None):\n    def fabrica_de_funcoes(func):\n        print('Decoradora 1')\n        def aninhada(*args, **kwargs):\n            print('Parâmetros do decorador, ', a, b, c)\n            print('Aninhada')\n            res = func(*args, **kwargs)\n            return res\n        return aninhada\n    return fabrica_de_funcoes",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "def soma(x, y):\n    return x + y\ndecoradora = fabrica_de_decoradores()\nmultiplica = decoradora(lambda x, y: x * y)\ndez_mais_cinco = soma(10, 5)\ndez_vezes_cinco = multiplica(10, 5)\nprint(dez_mais_cinco)\nprint(dez_vezes_cinco)",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "invertida",
        "kind": 5,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "invertida = inverte_string('123')\nprint(invertida)\ndef fabrica_de_decoradores(a=None, b=None, c=None):\n    def fabrica_de_funcoes(func):\n        print('Decoradora 1')\n        def aninhada(*args, **kwargs):\n            print('Parâmetros do decorador, ', a, b, c)\n            print('Aninhada')\n            res = func(*args, **kwargs)\n            return res",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "decoradora",
        "kind": 5,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "decoradora = fabrica_de_decoradores()\nmultiplica = decoradora(lambda x, y: x * y)\ndez_mais_cinco = soma(10, 5)\ndez_vezes_cinco = multiplica(10, 5)\nprint(dez_mais_cinco)\nprint(dez_vezes_cinco)",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "multiplica",
        "kind": 5,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "multiplica = decoradora(lambda x, y: x * y)\ndez_mais_cinco = soma(10, 5)\ndez_vezes_cinco = multiplica(10, 5)\nprint(dez_mais_cinco)\nprint(dez_vezes_cinco)",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "dez_mais_cinco",
        "kind": 5,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "dez_mais_cinco = soma(10, 5)\ndez_vezes_cinco = multiplica(10, 5)\nprint(dez_mais_cinco)\nprint(dez_vezes_cinco)",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "dez_vezes_cinco",
        "kind": 5,
        "importPath": "exemplo_decoradores",
        "description": "exemplo_decoradores",
        "peekOfCode": "dez_vezes_cinco = multiplica(10, 5)\nprint(dez_mais_cinco)\nprint(dez_vezes_cinco)",
        "detail": "exemplo_decoradores",
        "documentation": {}
    },
    {
        "label": "parametros_decorador",
        "kind": 2,
        "importPath": "exemplo_decoradores_ordem",
        "description": "exemplo_decoradores_ordem",
        "peekOfCode": "def parametros_decorador(nome):\n    def decorador(func):\n        print('Decorador:', nome)\n        def sua_nova_funcao(*args, **kwargs):\n            res = func(*args, **kwargs)\n            final = f'{res} {nome}'\n            return final\n        return sua_nova_funcao\n    return decorador\n@parametros_decorador(nome='5')",
        "detail": "exemplo_decoradores_ordem",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "exemplo_decoradores_ordem",
        "description": "exemplo_decoradores_ordem",
        "peekOfCode": "def soma(x, y):\n    return x + y\ndez_mais_cinco = soma(10, 5)\nprint(dez_mais_cinco, soma(5,5))",
        "detail": "exemplo_decoradores_ordem",
        "documentation": {}
    },
    {
        "label": "dez_mais_cinco",
        "kind": 5,
        "importPath": "exemplo_decoradores_ordem",
        "description": "exemplo_decoradores_ordem",
        "peekOfCode": "dez_mais_cinco = soma(10, 5)\nprint(dez_mais_cinco, soma(5,5))",
        "detail": "exemplo_decoradores_ordem",
        "documentation": {}
    },
    {
        "label": "produto",
        "kind": 5,
        "importPath": "exemplo_dic_set_comprehension",
        "description": "exemplo_dic_set_comprehension",
        "peekOfCode": "produto = {\n    'nome': 'Caneta Azul',\n    'preco': 2.5,\n    'categoria': 'Escritório',\n}\ndc = {\n    chave: valor.upper()\n    if isinstance(valor, str) else valor\n    for chave, valor\n    in produto.items()",
        "detail": "exemplo_dic_set_comprehension",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "exemplo_dic_set_comprehension",
        "description": "exemplo_dic_set_comprehension",
        "peekOfCode": "dc = {\n    chave: valor.upper()\n    if isinstance(valor, str) else valor\n    for chave, valor\n    in produto.items()\n    if chave != 'categoria'\n}\nlista = [\n    ('a', 'valor a'),\n    ('b', 'valor a'),",
        "detail": "exemplo_dic_set_comprehension",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exemplo_dic_set_comprehension",
        "description": "exemplo_dic_set_comprehension",
        "peekOfCode": "lista = [\n    ('a', 'valor a'),\n    ('b', 'valor a'),\n    ('b', 'valor a'),\n]\ndc = {\n    chave: valor\n    for chave, valor in lista\n}\ns1 = {2 ** i for i in range(10)}",
        "detail": "exemplo_dic_set_comprehension",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "exemplo_dic_set_comprehension",
        "description": "exemplo_dic_set_comprehension",
        "peekOfCode": "dc = {\n    chave: valor\n    for chave, valor in lista\n}\ns1 = {2 ** i for i in range(10)}\nprint(s1)",
        "detail": "exemplo_dic_set_comprehension",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "exemplo_dic_set_comprehension",
        "description": "exemplo_dic_set_comprehension",
        "peekOfCode": "s1 = {2 ** i for i in range(10)}\nprint(s1)",
        "detail": "exemplo_dic_set_comprehension",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "exemplo_dir_hasttr_getatrr",
        "description": "exemplo_dir_hasttr_getatrr",
        "peekOfCode": "string = 'Luiz'\nmetodo = 'strip'\nif hasattr(string, metodo):\n    print('Existe upper')\n    print(getattr(string, metodo)())\nelse:\n    print('Não existe o método', metodo)",
        "detail": "exemplo_dir_hasttr_getatrr",
        "documentation": {}
    },
    {
        "label": "metodo",
        "kind": 5,
        "importPath": "exemplo_dir_hasttr_getatrr",
        "description": "exemplo_dir_hasttr_getatrr",
        "peekOfCode": "metodo = 'strip'\nif hasattr(string, metodo):\n    print('Existe upper')\n    print(getattr(string, metodo)())\nelse:\n    print('Não existe o método', metodo)",
        "detail": "exemplo_dir_hasttr_getatrr",
        "documentation": {}
    },
    {
        "label": "falsy",
        "kind": 2,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "def falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))\nprint(f'{dicionario=}', falsy(dicionario))\nprint(f'{conjunto=}', falsy(conjunto))\nprint(f'{tupla=}', falsy(tupla))\nprint(f'{string=}', falsy(string))\nprint(f'{inteito=}', falsy(inteito))\nprint(f'{flutuante=}', falsy(flutuante))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "lista = []\ndicionario = {}\nconjunto = set()\ntupla = ()\nstring = ''\ninteito = 0\nflutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "dicionario",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "dicionario = {}\nconjunto = set()\ntupla = ()\nstring = ''\ninteito = 0\nflutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor):",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "conjunto",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "conjunto = set()\ntupla = ()\nstring = ''\ninteito = 0\nflutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "tupla",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "tupla = ()\nstring = ''\ninteito = 0\nflutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "string = ''\ninteito = 0\nflutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "inteito",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "inteito = 0\nflutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))\nprint(f'{dicionario=}', falsy(dicionario))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "flutuante",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "flutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))\nprint(f'{dicionario=}', falsy(dicionario))\nprint(f'{conjunto=}', falsy(conjunto))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "nada",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "nada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))\nprint(f'{dicionario=}', falsy(dicionario))\nprint(f'{conjunto=}', falsy(conjunto))\nprint(f'{tupla=}', falsy(tupla))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "falso",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "falso = False\nintervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))\nprint(f'{dicionario=}', falsy(dicionario))\nprint(f'{conjunto=}', falsy(conjunto))\nprint(f'{tupla=}', falsy(tupla))\nprint(f'{string=}', falsy(string))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "intervalo",
        "kind": 5,
        "importPath": "exemplo_falsy",
        "description": "exemplo_falsy",
        "peekOfCode": "intervalo = range(0)\ndef falsy(valor):\n    return 'falsy'if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))\nprint(f'{dicionario=}', falsy(dicionario))\nprint(f'{conjunto=}', falsy(conjunto))\nprint(f'{tupla=}', falsy(tupla))\nprint(f'{string=}', falsy(string))\nprint(f'{inteito=}', falsy(inteito))",
        "detail": "exemplo_falsy",
        "documentation": {}
    },
    {
        "label": "print_iter",
        "kind": 2,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "def print_iter(iterator):\n    print(*list(iterator), sep='\\n')\n    print()\nprodutos = [\n    {'nome': 'Produto 5', 'preco': 10.00},\n    {'nome': 'Produto 1', 'preco': 22.32},\n    {'nome': 'Produto 3', 'preco': 10.11},\n    {'nome': 'Produto 2', 'preco': 105.87},\n    {'nome': 'Produto 4', 'preco': 69.90},\n]",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "filtrar_preco",
        "kind": 2,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "def filtrar_preco(produto):\n    return produto['preco'] > 100\n# novos_produtos = [\n#     p for p in produtos\n#     if p['preco'] > 100\n# ]\nnovos_produtos = filter(\n    # lambda produto: produto['preco'] > 100,\n    filtrar_preco,\n    produtos",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "print_iter",
        "kind": 2,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "def print_iter(iterable):\n    print(*iterable, sep='\\n')\n    print('')\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "produtos",
        "kind": 5,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "produtos = [\n    {'nome': 'Produto 5', 'preco': 10.00},\n    {'nome': 'Produto 1', 'preco': 22.32},\n    {'nome': 'Produto 3', 'preco': 10.11},\n    {'nome': 'Produto 2', 'preco': 105.87},\n    {'nome': 'Produto 4', 'preco': 69.90},\n]\ndef filtrar_preco(produto):\n    return produto['preco'] > 100\n# novos_produtos = [",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "novos_produtos",
        "kind": 5,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "novos_produtos = filter(\n    # lambda produto: produto['preco'] > 100,\n    filtrar_preco,\n    produtos\n)\nprint_iter(produtos)\nprint_iter(novos_produtos)\n#ou-------------------------------------------------------------------------------------------------------------------------------------\ndef print_iter(iterable):\n    print(*iterable, sep='\\n')",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "produtos",
        "kind": 5,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "produtos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\ninteriter = (cont for cont in range(1, 5))\nlistafilter = [{'nome': f'Produto {next(interiter)}','preco': item} for item in list(item*3.59 for item in [1, 2, 3, 5])]\nprint('Produtos de Produtos: ')",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "interiter",
        "kind": 5,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "interiter = (cont for cont in range(1, 5))\nlistafilter = [{'nome': f'Produto {next(interiter)}','preco': item} for item in list(item*3.59 for item in [1, 2, 3, 5])]\nprint('Produtos de Produtos: ')\nprint_iter(produtos)\nprint('Produtos da Lista Filter: ')\nprint_iter(listafilter)\nprint('Produtos filtrados por list Comprehension: ')\nprint_iter(list({**dicionario} for dicionario in produtos if dicionario['preco'] > 50))\nprint('')\nprint('Produtos da listafilter filtrados por filter: ')",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "listafilter",
        "kind": 5,
        "importPath": "exemplo_filtro",
        "description": "exemplo_filtro",
        "peekOfCode": "listafilter = [{'nome': f'Produto {next(interiter)}','preco': item} for item in list(item*3.59 for item in [1, 2, 3, 5])]\nprint('Produtos de Produtos: ')\nprint_iter(produtos)\nprint('Produtos da Lista Filter: ')\nprint_iter(listafilter)\nprint('Produtos filtrados por list Comprehension: ')\nprint_iter(list({**dicionario} for dicionario in produtos if dicionario['preco'] > 50))\nprint('')\nprint('Produtos da listafilter filtrados por filter: ')\nprint_iter(list(filter(lambda dicionario: dicionario['preco'] > 10, listafilter)))",
        "detail": "exemplo_filtro",
        "documentation": {}
    },
    {
        "label": "generator",
        "kind": 2,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "def generator(n=0, maximum=10):\n    while True:\n        yield n\n        n += 1\n        if n >= maximum:\n            return\ngen = generator(maximum=1000000)\nfor n in gen:\n    print(n)\n# Yield from",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "gen1",
        "kind": 2,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "def gen1():\n    print('COMECOU GEN1')\n    yield 1\n    yield 2\n    yield 3\n    print('ACABOU GEN1')\ndef gen3():\n    print('COMECOU GEN3')\n    yield 10\n    yield 20",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "gen3",
        "kind": 2,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "def gen3():\n    print('COMECOU GEN3')\n    yield 10\n    yield 20\n    yield 30\n    print('ACABOU GEN3')\ndef gen2(gen=None):\n    print('COMECOU GEN2')\n    if gen is not None:\n        yield from gen",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "gen2",
        "kind": 2,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "def gen2(gen=None):\n    print('COMECOU GEN2')\n    if gen is not None:\n        yield from gen\n    yield 4\n    yield 5\n    yield 6\n    print('ACABOU GEN2')\ng1 = gen2(gen1())\ng2 = gen2(gen3())",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "iterable",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "iterable = ['Eu', 'Tenho', '__iter__']\niterator = iter(iterable)  # tem __iter__ e __next__\nlista = [n for n in range(1000000)]\ngenerator = (n for n in range(1000000))\nprint(sys.getsizeof(lista))\nprint(sys.getsizeof(generator))\nprint(generator)\n# for n in generator:\n#     print(n)\n# Introdução às Generator functions em Python",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "iterator",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "iterator = iter(iterable)  # tem __iter__ e __next__\nlista = [n for n in range(1000000)]\ngenerator = (n for n in range(1000000))\nprint(sys.getsizeof(lista))\nprint(sys.getsizeof(generator))\nprint(generator)\n# for n in generator:\n#     print(n)\n# Introdução às Generator functions em Python\n# generator = (n for n in range(1000000))",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "lista = [n for n in range(1000000)]\ngenerator = (n for n in range(1000000))\nprint(sys.getsizeof(lista))\nprint(sys.getsizeof(generator))\nprint(generator)\n# for n in generator:\n#     print(n)\n# Introdução às Generator functions em Python\n# generator = (n for n in range(1000000))\ndef generator(n=0, maximum=10):",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "generator",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "generator = (n for n in range(1000000))\nprint(sys.getsizeof(lista))\nprint(sys.getsizeof(generator))\nprint(generator)\n# for n in generator:\n#     print(n)\n# Introdução às Generator functions em Python\n# generator = (n for n in range(1000000))\ndef generator(n=0, maximum=10):\n    while True:",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "gen",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "gen = generator(maximum=1000000)\nfor n in gen:\n    print(n)\n# Yield from\ndef gen1():\n    print('COMECOU GEN1')\n    yield 1\n    yield 2\n    yield 3\n    print('ACABOU GEN1')",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "g1",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "g1 = gen2(gen1())\ng2 = gen2(gen3())\ng3 = gen2()\nfor numero in g1:\n    print(numero)\nprint()\nfor numero in g2:\n    print(numero)\nprint()\nfor numero in g3:",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "g2",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "g2 = gen2(gen3())\ng3 = gen2()\nfor numero in g1:\n    print(numero)\nprint()\nfor numero in g2:\n    print(numero)\nprint()\nfor numero in g3:\n    print(numero)",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "g3",
        "kind": 5,
        "importPath": "exemplo_generator",
        "description": "exemplo_generator",
        "peekOfCode": "g3 = gen2()\nfor numero in g1:\n    print(numero)\nprint()\nfor numero in g2:\n    print(numero)\nprint()\nfor numero in g3:\n    print(numero)\nprint()",
        "detail": "exemplo_generator",
        "documentation": {}
    },
    {
        "label": "Caneta",
        "kind": 6,
        "importPath": "exemplo_getter_proprety",
        "description": "exemplo_getter_proprety",
        "peekOfCode": "class Caneta:\n    def __init__(self, cor):\n        self.cor_tinta = cor\n    @property\n    def cor(self):\n        print('PROPERTY')\n        return self.cor_tinta\n    @property\n    def cor_tampa(self):\n        return 123456",
        "detail": "exemplo_getter_proprety",
        "documentation": {}
    },
    {
        "label": "caneta",
        "kind": 5,
        "importPath": "exemplo_getter_proprety",
        "description": "exemplo_getter_proprety",
        "peekOfCode": "caneta = Caneta('Azul')\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor_tampa)\n#####################################\n# class Caneta:",
        "detail": "exemplo_getter_proprety",
        "documentation": {}
    },
    {
        "label": "ordena",
        "kind": 2,
        "importPath": "exemplo_groupby",
        "description": "exemplo_groupby",
        "peekOfCode": "def ordena(aluno):\n    return aluno['nota']\nalunos_agrupados = sorted(alunos, key=ordena)\ngrupos = groupby(alunos_agrupados, key=ordena)\nfor chave, grupo in grupos:\n    print(chave)\n    for aluno in grupo:\n        print(aluno)",
        "detail": "exemplo_groupby",
        "documentation": {}
    },
    {
        "label": "alunos",
        "kind": 5,
        "importPath": "exemplo_groupby",
        "description": "exemplo_groupby",
        "peekOfCode": "alunos = [\n    {'nome': 'Luiz', 'nota': 'A'},\n    {'nome': 'Letícia', 'nota': 'B'},\n    {'nome': 'Fabrício', 'nota': 'A'},\n    {'nome': 'Rosemary', 'nota': 'C'},\n    {'nome': 'Joana', 'nota': 'D'},\n    {'nome': 'João', 'nota': 'A'},\n    {'nome': 'Eduardo', 'nota': 'B'},\n    {'nome': 'André', 'nota': 'A'},\n    {'nome': 'Anderson', 'nota': 'C'},",
        "detail": "exemplo_groupby",
        "documentation": {}
    },
    {
        "label": "alunos_agrupados",
        "kind": 5,
        "importPath": "exemplo_groupby",
        "description": "exemplo_groupby",
        "peekOfCode": "alunos_agrupados = sorted(alunos, key=ordena)\ngrupos = groupby(alunos_agrupados, key=ordena)\nfor chave, grupo in grupos:\n    print(chave)\n    for aluno in grupo:\n        print(aluno)",
        "detail": "exemplo_groupby",
        "documentation": {}
    },
    {
        "label": "grupos",
        "kind": 5,
        "importPath": "exemplo_groupby",
        "description": "exemplo_groupby",
        "peekOfCode": "grupos = groupby(alunos_agrupados, key=ordena)\nfor chave, grupo in grupos:\n    print(chave)\n    for aluno in grupo:\n        print(aluno)",
        "detail": "exemplo_groupby",
        "documentation": {}
    },
    {
        "label": "Pessoa",
        "kind": 6,
        "importPath": "exemplo_herança",
        "description": "exemplo_herança",
        "peekOfCode": "class Pessoa:\n    cpf = '1234'\n    def __init__(self, nome, sobrenome):\n        self.nome = nome\n        self.sobrenome = sobrenome\n    def falar_nome_classe(self):\n        print('Classe PESSOA')\n        print(self.nome, self.sobrenome, self.__class__.__name__)\nclass Cliente(Pessoa):\n    def falar_nome_classe(self):",
        "detail": "exemplo_herança",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "kind": 6,
        "importPath": "exemplo_herança",
        "description": "exemplo_herança",
        "peekOfCode": "class Cliente(Pessoa):\n    def falar_nome_classe(self):\n        print('EITA, nem saí da classe CLIENTE')\n        print(self.nome, self.sobrenome, self.__class__.__name__)\nclass Aluno(Pessoa):\n    cpf = 'cpf aluno'\n    ...\nc1 = Cliente('Luiz', 'Otávio')\nc1.falar_nome_classe()\na1 = Aluno('Maria', 'Helena')",
        "detail": "exemplo_herança",
        "documentation": {}
    },
    {
        "label": "Aluno",
        "kind": 6,
        "importPath": "exemplo_herança",
        "description": "exemplo_herança",
        "peekOfCode": "class Aluno(Pessoa):\n    cpf = 'cpf aluno'\n    ...\nc1 = Cliente('Luiz', 'Otávio')\nc1.falar_nome_classe()\na1 = Aluno('Maria', 'Helena')\na1.falar_nome_classe()\nprint(a1.cpf)\n# help(Cliente)",
        "detail": "exemplo_herança",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "exemplo_herança",
        "description": "exemplo_herança",
        "peekOfCode": "c1 = Cliente('Luiz', 'Otávio')\nc1.falar_nome_classe()\na1 = Aluno('Maria', 'Helena')\na1.falar_nome_classe()\nprint(a1.cpf)\n# help(Cliente)",
        "detail": "exemplo_herança",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "exemplo_herança",
        "description": "exemplo_herança",
        "peekOfCode": "a1 = Aluno('Maria', 'Helena')\na1.falar_nome_classe()\nprint(a1.cpf)\n# help(Cliente)",
        "detail": "exemplo_herança",
        "documentation": {}
    },
    {
        "label": "print_iter",
        "kind": 2,
        "importPath": "exemplo_itertools_aritemeticas",
        "description": "exemplo_itertools_aritemeticas",
        "peekOfCode": "def print_iter(iterator):\n    print(*list(iterator), sep='\\n')\n    print()\npessoas = [\n    'João', 'Joana', 'Luiz', 'Letícia',\n]\ncamisetas = [\n    ['preta', 'branca'],\n    ['p', 'm', 'g'],\n    ['masculino', 'feminino', 'unisex'],",
        "detail": "exemplo_itertools_aritemeticas",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "exemplo_itertools_aritemeticas",
        "description": "exemplo_itertools_aritemeticas",
        "peekOfCode": "pessoas = [\n    'João', 'Joana', 'Luiz', 'Letícia',\n]\ncamisetas = [\n    ['preta', 'branca'],\n    ['p', 'm', 'g'],\n    ['masculino', 'feminino', 'unisex'],\n    ['algodão', 'poliéster']\n]\nprint_iter(combinations(pessoas, 2))",
        "detail": "exemplo_itertools_aritemeticas",
        "documentation": {}
    },
    {
        "label": "camisetas",
        "kind": 5,
        "importPath": "exemplo_itertools_aritemeticas",
        "description": "exemplo_itertools_aritemeticas",
        "peekOfCode": "camisetas = [\n    ['preta', 'branca'],\n    ['p', 'm', 'g'],\n    ['masculino', 'feminino', 'unisex'],\n    ['algodão', 'poliéster']\n]\nprint_iter(combinations(pessoas, 2))\nprint_iter(permutations(pessoas, 2))\nprint_iter(product(*camisetas))",
        "detail": "exemplo_itertools_aritemeticas",
        "documentation": {}
    },
    {
        "label": "exib",
        "kind": 2,
        "importPath": "exemplo_lambda",
        "description": "exemplo_lambda",
        "peekOfCode": "def exib(list): \n    for iten in list:\n        print(iten)\n    print()\nl1 =sorted(list, key=lambda iten : iten['nome'])\nl2 =sorted(list, key=lambda iten : iten['sobrenome'])\nexib(l1)\nexib(l2)",
        "detail": "exemplo_lambda",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "exemplo_lambda",
        "description": "exemplo_lambda",
        "peekOfCode": "list = [\n     {'nome': 'Luiz', 'sobrenome': 'Miranda'},\n    {'nome': 'Maria', 'sobrenome': 'Oliveira'},\n     {'nome': 'Daniel', 'sobrenome': 'Silva'},\n     {'nome': 'Eduardo', 'sobrenome': 'Moreira'},\n     {'nome': 'Aline', 'sobrenome': 'Souza'},\n]\ndef exib(list): \n    for iten in list:\n        print(iten)",
        "detail": "exemplo_lambda",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exemplo_list_comprehension",
        "description": "exemplo_list_comprehension",
        "peekOfCode": "lista = []\nfor numero in range(10):\n    lista.append(numero)\n# print(lista)\nlista = [\n    numero * 2\n    for numero in range(10)\n]\n# print(list(range(10)))\n# print(lista)",
        "detail": "exemplo_list_comprehension",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exemplo_list_comprehension",
        "description": "exemplo_list_comprehension",
        "peekOfCode": "lista = [\n    numero * 2\n    for numero in range(10)\n]\n# print(list(range(10)))\n# print(lista)\n# Mapeamento de dados em list comprehension\nprodutos = [\n    {'nome': 'p1', 'preco': 20, },\n    {'nome': 'p2', 'preco': 10, },",
        "detail": "exemplo_list_comprehension",
        "documentation": {}
    },
    {
        "label": "produtos",
        "kind": 5,
        "importPath": "exemplo_list_comprehension",
        "description": "exemplo_list_comprehension",
        "peekOfCode": "produtos = [\n    {'nome': 'p1', 'preco': 20, },\n    {'nome': 'p2', 'preco': 10, },\n    {'nome': 'p3', 'preco': 30, },\n]\nnovos_produtos = [                                    #do lado direito tenho mapeamento do lado direito do for tenho o filtro\n    {**produto, 'preco': produto['preco'] * 1.05}\n    if produto['preco'] > 10 else {**produto}\n    for produto in produtos\n    if produto['preco'] > 10",
        "detail": "exemplo_list_comprehension",
        "documentation": {}
    },
    {
        "label": "novos_produtos",
        "kind": 5,
        "importPath": "exemplo_list_comprehension",
        "description": "exemplo_list_comprehension",
        "peekOfCode": "novos_produtos = [                                    #do lado direito tenho mapeamento do lado direito do for tenho o filtro\n    {**produto, 'preco': produto['preco'] * 1.05}\n    if produto['preco'] > 10 else {**produto}\n    for produto in produtos\n    if produto['preco'] > 10\n]\n# print(novos_produtos)\nprint(*novos_produtos, sep='\\n')\nlista = [\n    (x,y)",
        "detail": "exemplo_list_comprehension",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "exemplo_list_comprehension",
        "description": "exemplo_list_comprehension",
        "peekOfCode": "lista = [\n    (x,y)\n    for x in range(3)\n    for y in range(3)\n]\nprint(lista)",
        "detail": "exemplo_list_comprehension",
        "documentation": {}
    },
    {
        "label": "iter_Print",
        "kind": 2,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "def iter_Print(iterator):\n    print(*list(iterator), sep='\\n')\n    print()\nprodutos = [\n    {'nome': 'Produto 5', 'preco': 10.00},\n    {'nome': 'Produto 1', 'preco': 22.32},\n    {'nome': 'Produto 3', 'preco': 10.11},\n    {'nome': 'Produto 2', 'preco': 105.87},\n    {'nome': 'Produto 4', 'preco': 69.90},\n]",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "aumentar_porcentagem",
        "kind": 2,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "def aumentar_porcentagem(valor, porcentagem):\n    return round(valor * porcentagem, 2)\naumentar_dez_porcento = partial(\n    aumentar_porcentagem,\n    porcentagem=1.1\n)\n# novos_produtos = [\n#     {**p,\n#         'preco': aumentar_dez_porcento(p['preco'])}\n#     for p in produtos",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "muda_preco_de_produtos",
        "kind": 2,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "def muda_preco_de_produtos(produto):\n    return {\n        **produto,\n        'preco': aumentar_dez_porcento(\n            produto['preco']\n        )\n    }\nnovos_produtos = list(map(\n    muda_preco_de_produtos,\n    produtos",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "executa",
        "kind": 2,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "def executa(func, *args, **kwargs):\n    return func(*args, **kwargs)\ndef multiplica(num, const):\n    return num * const\ndef iter_Print(iterable):\n    print(*iterable, sep='\\n')\n    print('')\ndobra = partial(multiplica, const=2)\nprint(dobra(50))\npercentaumentvin = partial(lambda x, y: x*(1+ (y/100)), y=20)",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "multiplica",
        "kind": 2,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "def multiplica(num, const):\n    return num * const\ndef iter_Print(iterable):\n    print(*iterable, sep='\\n')\n    print('')\ndobra = partial(multiplica, const=2)\nprint(dobra(50))\npercentaumentvin = partial(lambda x, y: x*(1+ (y/100)), y=20)\nprint(percentaumentvin(10))\nprodutos = [",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "iter_Print",
        "kind": 2,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "def iter_Print(iterable):\n    print(*iterable, sep='\\n')\n    print('')\ndobra = partial(multiplica, const=2)\nprint(dobra(50))\npercentaumentvin = partial(lambda x, y: x*(1+ (y/100)), y=20)\nprint(percentaumentvin(10))\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "produtos",
        "kind": 5,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "produtos = [\n    {'nome': 'Produto 5', 'preco': 10.00},\n    {'nome': 'Produto 1', 'preco': 22.32},\n    {'nome': 'Produto 3', 'preco': 10.11},\n    {'nome': 'Produto 2', 'preco': 105.87},\n    {'nome': 'Produto 4', 'preco': 69.90},\n]\ndef aumentar_porcentagem(valor, porcentagem):\n    return round(valor * porcentagem, 2)\naumentar_dez_porcento = partial(",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "aumentar_dez_porcento",
        "kind": 5,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "aumentar_dez_porcento = partial(\n    aumentar_porcentagem,\n    porcentagem=1.1\n)\n# novos_produtos = [\n#     {**p,\n#         'preco': aumentar_dez_porcento(p['preco'])}\n#     for p in produtos\n# ]\ndef muda_preco_de_produtos(produto):",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "novos_produtos",
        "kind": 5,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "novos_produtos = list(map(\n    muda_preco_de_produtos,\n    produtos\n))\niter_Print(produtos)\niter_Print(novos_produtos)\nprint(\n    list(map(\n        lambda x: x * 3,\n        [1, 2, 3, 4]",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "dobra",
        "kind": 5,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "dobra = partial(multiplica, const=2)\nprint(dobra(50))\npercentaumentvin = partial(lambda x, y: x*(1+ (y/100)), y=20)\nprint(percentaumentvin(10))\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "percentaumentvin",
        "kind": 5,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "percentaumentvin = partial(lambda x, y: x*(1+ (y/100)), y=20)\nprint(percentaumentvin(10))\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\nprint('Preço antigo dos produtos: ')",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "produtos",
        "kind": 5,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "produtos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\nprint('Preço antigo dos produtos: ')\niter_Print(produtos)\nnovosprodutos = list(map(lambda dicionario: {**dicionario, 'preco': percentaumentvin(dicionario['preco'])}, produtos))",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "novosprodutos",
        "kind": 5,
        "importPath": "exemplo_map",
        "description": "exemplo_map",
        "peekOfCode": "novosprodutos = list(map(lambda dicionario: {**dicionario, 'preco': percentaumentvin(dicionario['preco'])}, produtos))\nprint('')\nprint('Aumento de preço nos produtos: ')\niter_Print(novosprodutos)",
        "detail": "exemplo_map",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "exemplo_psoitional_keywords",
        "description": "exemplo_psoitional_keywords",
        "peekOfCode": "def soma(a, b, /, *, c, **kwargs):\n    print(kwargs)\n    print(a + b + c)\nsoma(1, 2, c=3, nome='teste')",
        "detail": "exemplo_psoitional_keywords",
        "documentation": {}
    },
    {
        "label": "nao_aceito_zero",
        "kind": 2,
        "importPath": "exemplo_raise",
        "description": "exemplo_raise",
        "peekOfCode": "def nao_aceito_zero(d):\n    if d == 0:\n        raise ZeroDivisionError('Você está tentando dividir por zero')\n    return True\ndef deve_ser_int_ou_float(n):\n    tipo_n = type(n)\n    if not isinstance(n, (float, int)):\n        raise TypeError(\n            f'\"{n}\" deve ser int ou float. '\n            f'\"{tipo_n.__name__}\" enviado.'",
        "detail": "exemplo_raise",
        "documentation": {}
    },
    {
        "label": "deve_ser_int_ou_float",
        "kind": 2,
        "importPath": "exemplo_raise",
        "description": "exemplo_raise",
        "peekOfCode": "def deve_ser_int_ou_float(n):\n    tipo_n = type(n)\n    if not isinstance(n, (float, int)):\n        raise TypeError(\n            f'\"{n}\" deve ser int ou float. '\n            f'\"{tipo_n.__name__}\" enviado.'\n        )\n    return True\ndef divide(n, d):\n    deve_ser_int_ou_float(n)",
        "detail": "exemplo_raise",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "exemplo_raise",
        "description": "exemplo_raise",
        "peekOfCode": "def divide(n, d):\n    deve_ser_int_ou_float(n)\n    deve_ser_int_ou_float(d)\n    nao_aceito_zero(d)\n    return n / d\nprint(divide(8, '0'))",
        "detail": "exemplo_raise",
        "documentation": {}
    },
    {
        "label": "recursiva",
        "kind": 2,
        "importPath": "exemplo_recusao",
        "description": "exemplo_recusao",
        "peekOfCode": "def recursiva(inicio=0, fim=4):\n# import sys\n    print(inicio, fim)\n# sys.setrecursionlimit(1004)\n    # Caso base\n    if inicio >= fim:\n        return fim\n    # Caso recursivo\n    # contar até chegar ao final\n    inicio += 1",
        "detail": "exemplo_recusao",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "exemplo_recusao",
        "description": "exemplo_recusao",
        "peekOfCode": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\nprint(factorial(5))\nprint(factorial(10))\nprint(factorial(100))",
        "detail": "exemplo_recusao",
        "documentation": {}
    },
    {
        "label": "produtos",
        "kind": 5,
        "importPath": "exemplo_reduce",
        "description": "exemplo_reduce",
        "peekOfCode": "produtos = [\n    {'nome': 'Produto 5', 'preco': 10},\n    {'nome': 'Produto 1', 'preco': 22},\n    {'nome': 'Produto 3', 'preco': 2},\n    {'nome': 'Produto 2', 'preco': 6},\n    {'nome': 'Produto 4', 'preco': 4},\n]\n# def funcao_do_reduce(acumulador, produto):\n#     print('acumulador', acumulador)\n#     print('produto', produto)",
        "detail": "exemplo_reduce",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "exemplo_reduce",
        "description": "exemplo_reduce",
        "peekOfCode": "total = reduce(\n    lambda ac, p: ac + p['preco'],\n    produtos,\n    0\n)\nprint('Total é', total)\n# total = 0\n# for p in produtos:\n#     total += p['preco']\n# print(total)",
        "detail": "exemplo_reduce",
        "documentation": {}
    },
    {
        "label": "interiter",
        "kind": 5,
        "importPath": "exemplo_reduce",
        "description": "exemplo_reduce",
        "peekOfCode": "interiter = (cont for cont in range(1, 5))\nlistafilter = [{'nome': f'Produto {next(interiter)}','preco': item} for item in list(item*3.59 for item in [1, 2, 3, 5])]\nprint(reduce(lambda acumulador, item: round(item['preco'] + acumulador, 2), listafilter, 0))",
        "detail": "exemplo_reduce",
        "documentation": {}
    },
    {
        "label": "listafilter",
        "kind": 5,
        "importPath": "exemplo_reduce",
        "description": "exemplo_reduce",
        "peekOfCode": "listafilter = [{'nome': f'Produto {next(interiter)}','preco': item} for item in list(item*3.59 for item in [1, 2, 3, 5])]\nprint(reduce(lambda acumulador, item: round(item['preco'] + acumulador, 2), listafilter, 0))",
        "detail": "exemplo_reduce",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "exemplo_super",
        "description": "exemplo_super",
        "peekOfCode": "class A(object):\n    atributo_a = 'valor a'\n    def __init__(self, atributo):\n        self.atributo = atributo\n        print('a')\n    def metodo(self):\n        print('A')\nclass B(A):\n    atributo_b = 'valor b'\n    def __init__(self, atributo, outra_coisa):",
        "detail": "exemplo_super",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "exemplo_super",
        "description": "exemplo_super",
        "peekOfCode": "class B(A):\n    atributo_b = 'valor b'\n    def __init__(self, atributo, outra_coisa):\n        super().__init__(atributo)\n        self.outra_coisa = outra_coisa\n        print('b')\n    def metodo(self):\n        print('B')\nclass C(B):\n    atributo_c = 'valor c'",
        "detail": "exemplo_super",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "exemplo_super",
        "description": "exemplo_super",
        "peekOfCode": "class C(B):\n    atributo_c = 'valor c'\n    def __init__(self, *args, **kwargs):\n        print('EI, burlei o sistema.')\n        super().__init__(*args, **kwargs)\n    def metodo(self):\n        # super().metodo()  # B\n        # super(B, self).metodo()  # A\n        # super(A, self).metodo()  # object\n        A.metodo(self)",
        "detail": "exemplo_super",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "exemplo_super",
        "description": "exemplo_super",
        "peekOfCode": "c = C(outra_coisa ='Atributo',atributo= 'Qualquer')\nprint(c.atributo)\nprint(c.outra_coisa)\nc.metodo()\n# print(c.atributo_a)\n# print(c.atributo_b)\n# print(c.atributo_c)\n# c.metodo()",
        "detail": "exemplo_super",
        "documentation": {}
    },
    {
        "label": "Carrinho",
        "kind": 6,
        "importPath": "exempolo_agregacao",
        "description": "exempolo_agregacao",
        "peekOfCode": "class Carrinho:\n    def __init__(self):\n        self._produtos = []\n    def total(self):\n        return sum([p.preco for p in self._produtos])\n    def inserir_produtos(self, *produtos):\n        # self._produtos.extend(produtos)\n        # self._produtos += produtos\n        for produto in produtos:\n            self._produtos.append(produto)",
        "detail": "exempolo_agregacao",
        "documentation": {}
    },
    {
        "label": "Produto",
        "kind": 6,
        "importPath": "exempolo_agregacao",
        "description": "exempolo_agregacao",
        "peekOfCode": "class Produto:\n    def __init__(self, nome, preco):\n        self.nome = nome\n        self.preco = preco\ncarrinho = Carrinho()\np1, p2 = Produto('Caneta', 1.20), Produto('Camiseta', 20)\ncarrinho.inserir_produtos(p1, p2)\ncarrinho.listar_produtos()\nprint(carrinho.total())",
        "detail": "exempolo_agregacao",
        "documentation": {}
    },
    {
        "label": "carrinho",
        "kind": 5,
        "importPath": "exempolo_agregacao",
        "description": "exempolo_agregacao",
        "peekOfCode": "carrinho = Carrinho()\np1, p2 = Produto('Caneta', 1.20), Produto('Camiseta', 20)\ncarrinho.inserir_produtos(p1, p2)\ncarrinho.listar_produtos()\nprint(carrinho.total())",
        "detail": "exempolo_agregacao",
        "documentation": {}
    },
    {
        "label": "Direcoes",
        "kind": 6,
        "importPath": "teoria_enum",
        "description": "teoria_enum",
        "peekOfCode": "class Direcoes(enum.Enum):\n    ESQUERDA = enum.auto()\n    DIREITA = enum.auto()\n    CIMA = enum.auto()\n    BAIXO = enum.auto()\ndef mover(direcao: Direcoes):\n    if not isinstance(direcao,Direcoes):\n        raise ValueError('direcao nao encontrada')\n    print(f'Movendo para {direcao.name} {direcao.value}')\nmover(Direcoes.ESQUERDA)",
        "detail": "teoria_enum",
        "documentation": {}
    },
    {
        "label": "mover",
        "kind": 2,
        "importPath": "teoria_enum",
        "description": "teoria_enum",
        "peekOfCode": "def mover(direcao: Direcoes):\n    if not isinstance(direcao,Direcoes):\n        raise ValueError('direcao nao encontrada')\n    print(f'Movendo para {direcao.name} {direcao.value}')\nmover(Direcoes.ESQUERDA)\nmover(Direcoes.DIREITA)\n#mover('esquerda')\n#mover('direita')\n#mover('acima')\n#mover('abaixo')",
        "detail": "teoria_enum",
        "documentation": {}
    },
    {
        "label": "#Direcoes",
        "kind": 5,
        "importPath": "teoria_enum",
        "description": "teoria_enum",
        "peekOfCode": "#Direcoes = enum.Enum('Direcoes',['ESQUERDA','DIREITA','CIMA','BAIXO'])\nclass Direcoes(enum.Enum):\n    ESQUERDA = enum.auto()\n    DIREITA = enum.auto()\n    CIMA = enum.auto()\n    BAIXO = enum.auto()\ndef mover(direcao: Direcoes):\n    if not isinstance(direcao,Direcoes):\n        raise ValueError('direcao nao encontrada')\n    print(f'Movendo para {direcao.name} {direcao.value}')",
        "detail": "teoria_enum",
        "documentation": {}
    },
    {
        "label": "MyList",
        "kind": 6,
        "importPath": "teoria_iterable",
        "description": "teoria_iterable",
        "peekOfCode": "class MyList(Sequence):\n    def __init__(self):\n        self._data = {}\n        self._index = 0\n        self._next_index = 0\n    def append(self, *values):\n        for value in values:\n            self._data[self._index] = value\n            self._index += 1\n    def __len__(self) -> int:",
        "detail": "teoria_iterable",
        "documentation": {}
    }
]